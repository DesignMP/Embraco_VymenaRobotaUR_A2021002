var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "./CursorDefinitionBase"], function (require, exports, CursorDefinitionBase_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CrossHairCursor = /** @class */ (function (_super) {
        __extends(CrossHairCursor, _super);
        function CrossHairCursor(cursorHandlerId, cursorIndex) {
            var _this = _super.call(this, cursorHandlerId, cursorIndex) || this;
            _this.cursorCenterOffset = 4;
            _this.crosshairId = cursorHandlerId + "crossHairCursor" + "_" + cursorIndex + "_crossHair";
            return _this;
        }
        CrossHairCursor.prototype.drawCursor = function (leadCursorPosition, cursorPositions) {
            if (leadCursorPosition != undefined && cursorPositions[0] != undefined) {
                this.cursorPositions = cursorPositions;
                this.leadCursorPosition = leadCursorPosition;
                for (var i = 0; i < cursorPositions.length; i++) {
                    this.drawCrosshair(cursorPositions[i].position, i, cursorPositions[i].additionalInformation["hovered"], cursorPositions[i].additionalInformation["highlight"], cursorPositions[i].additionalInformation["selected"]);
                }
            }
        };
        CrossHairCursor.prototype.removeCursors = function () {
            var cursorElements = document.getElementsByClassName(this.crosshairId);
            while (cursorElements[0]) {
                cursorElements[0].remove();
            }
        };
        CrossHairCursor.prototype.drawCrosshair = function (position, index, hovered, highlight, selected) {
            var svgHtml;
            var currentColor = this.cursorColor;
            if (selected) {
                currentColor = this.selectedColor;
            }
            if (hovered) {
                currentColor = this.hoverColor;
            }
            if (!highlight) {
                svgHtml = "<svg style= \"position: absolute\" class =\"" + this.crosshairId + "\" height=\"100%\" width=\"100%\">\n            <line x1=\"" + (position.x - 14) + "\" y1=\"" + position.y + "\" x2=\"" + (position.x - 4) + "\" y2=\"" + position.y + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n            <line x1=\"" + (position.x + 14) + "\" y1=\"" + position.y + "\" x2=\"" + (position.x + 4) + "\" y2=\"" + position.y + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n            <line x1=\"" + (position.x) + "\" y1=\"" + (position.y - 14) + "\" x2=\"" + (position.x) + "\" y2=\"" + (position.y - 4) + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n            <line x1=\"" + (position.x) + "\" y1=\"" + (position.y + 14) + "\" x2=\"" + (position.x) + "\" y2=\"" + (position.y + 4) + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n\n            <line x1=\"" + (position.x - 4) + "\" y1=\"" + (position.y - 4) + "\" x2=\"" + (position.x + 4) + "\" y2=\"" + (position.y - 4) + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n            <line x1=\"" + (position.x - 4) + "\" y1=\"" + (position.y + 4) + "\" x2=\"" + (position.x + 4) + "\" y2=\"" + (position.y + 4) + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n            <line x1=\"" + (position.x - 4) + "\" y1=\"" + (position.y - 4) + "\" x2=\"" + (position.x - 4) + "\" y2=\"" + (position.y + 4) + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n            <line x1=\"" + (position.x + 4) + "\" y1=\"" + (position.y - 4) + "\" x2=\"" + (position.x + 4) + "\" y2=\"" + (position.y + 4) + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n\n            </svg>";
            }
            else {
                svgHtml = "<svg style= \"position: absolute\" class =\"" + this.crosshairId + "\" height=\"100%\" width=\"100%\">\n            <line x1=\"" + (position.x - 14) + "\" y1=\"" + position.y + "\" x2=\"" + (position.x - 4) + "\" y2=\"" + position.y + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n            <line x1=\"" + (position.x + 14) + "\" y1=\"" + position.y + "\" x2=\"" + (position.x + 4) + "\" y2=\"" + position.y + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n            <line x1=\"" + (position.x) + "\" y1=\"" + (position.y - 14) + "\" x2=\"" + (position.x) + "\" y2=\"" + (position.y - 4) + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n            <line x1=\"" + (position.x) + "\" y1=\"" + (position.y + 14) + "\" x2=\"" + (position.x) + "\" y2=\"" + (position.y + 4) + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n\n            <line x1=\"" + (position.x - 6) + "\" y1=\"" + (position.y - 6) + "\" x2=\"" + (position.x + 6) + "\" y2=\"" + (position.y - 6) + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n            <line x1=\"" + (position.x - 6) + "\" y1=\"" + (position.y + 6) + "\" x2=\"" + (position.x + 6) + "\" y2=\"" + (position.y + 6) + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n            <line x1=\"" + (position.x - 6) + "\" y1=\"" + (position.y - 6) + "\" x2=\"" + (position.x - 6) + "\" y2=\"" + (position.y + 6) + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n            <line x1=\"" + (position.x + 6) + "\" y1=\"" + (position.y - 6) + "\" x2=\"" + (position.x + 6) + "\" y2=\"" + (position.y + 6) + "\" style=\"stroke:" + currentColor + ";stroke-width:2\" />\n\n            </svg>";
            }
            var cursorHandler = document.getElementById(this.cursorHandlerContainerId);
            if (cursorHandler != undefined) {
                cursorHandler.innerHTML += svgHtml;
            }
        };
        CrossHairCursor.prototype.getClosestCursorPositionToPoint = function (point) {
            var distance = undefined;
            var currentClosestCursorPosition;
            if (this.cursorPositions != undefined) {
                for (var i = 0; i < this.cursorPositions.length; i++) {
                    if (distance == undefined || distance > this.calculateDistance(this.cursorPositions[i].position, point)) {
                        distance = this.calculateDistance(this.cursorPositions[i].position, point);
                        currentClosestCursorPosition = this.cursorPositions[i];
                        currentClosestCursorPosition.additionalInformation["distance"] = distance - this.cursorCenterOffset;
                    }
                }
            }
            return currentClosestCursorPosition;
        };
        /**
         * calculate distance between two points
         *
         * @private
         * @param {IPoint} point1
         * @param {IPoint} point2
         * @returns {number}
         * @memberof CrossHairCursor
         */
        CrossHairCursor.prototype.calculateDistance = function (point1, point2) {
            return (Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow((point2.y - point1.y), 2)));
        };
        return CrossHairCursor;
    }(CursorDefinitionBase_1.CursorDefinitionBase));
    exports.CrossHairCursor = CrossHairCursor;
});
//# sourceMappingURL=data:application/json;base64,