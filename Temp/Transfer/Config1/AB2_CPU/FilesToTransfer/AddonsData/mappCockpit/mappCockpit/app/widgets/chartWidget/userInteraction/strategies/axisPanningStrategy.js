define(["require", "exports", "../userInteractionController", "../../ChartBase"], function (require, exports, userInteractionController_1, ChartBase_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AxisPanningStrategy = /** @class */ (function () {
        function AxisPanningStrategy(userInteractionController) {
            this.dragIsActive = false;
            this.currentDragChart = undefined;
            this.userInteractionController = userInteractionController;
        }
        AxisPanningStrategy.prototype.onMouseHover = function (chart, chartObjectTypeUnderMouse) {
            //TODO: remove direct chart access and move this to setCursor Method in Chart
            if (chartObjectTypeUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.axis) {
                $(chart.cssParentContentId).css("cursor", "pointer");
                $(chart.cssParentContentId + "_canvas").css("cursor", "pointer");
            }
            else {
                $(chart.cssParentContentId).css("cursor", "default");
                $(chart.cssParentContentId + "_canvas").css("cursor", "default");
            }
        };
        AxisPanningStrategy.prototype.onClick = function (chart) {
        };
        AxisPanningStrategy.prototype.onMouseDown = function (chart, chartObjectTypeUnderMouse) {
            if (this.dragIsActive == false) {
                if (chartObjectTypeUnderMouse.args.axis != undefined) {
                    this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.togglePanning, chart, { boxZoomEnabled: false }));
                    this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.toggleBoxZoom, chart, { panningEnabled: false }));
                    this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.selectPanningAxes, chart, { zoomAxes: chartObjectTypeUnderMouse.args.axis }));
                }
            }
            return chartObjectTypeUnderMouse;
        };
        AxisPanningStrategy.prototype.onDrag = function (chart, args) {
            if (this.currentDragChart == undefined || chart == this.currentDragChart) {
                if (args.objectUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.axis || this.dragIsActive == true) {
                    this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.panChart, chart, { args: args }));
                    this.dragIsActive = true;
                    this.currentDragChart = chart;
                }
            }
            if (this.dragIsActive == false) {
                if (args.objectUnderMouse.args.axis != undefined) {
                    this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.selectPanningAxes, chart, { zoomAxes: args.chartObjectUnderMouse.args.axis }));
                }
            }
        };
        AxisPanningStrategy.prototype.onDragEnd = function (chart) {
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.endCursorDrag, chart, {}));
            this.dragIsActive = false;
            this.currentDragChart = undefined;
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.resetDragPosition, null, {}));
        };
        return AxisPanningStrategy;
    }());
    exports.AxisPanningStrategy = AxisPanningStrategy;
});
//# sourceMappingURL=data:application/json;base64,