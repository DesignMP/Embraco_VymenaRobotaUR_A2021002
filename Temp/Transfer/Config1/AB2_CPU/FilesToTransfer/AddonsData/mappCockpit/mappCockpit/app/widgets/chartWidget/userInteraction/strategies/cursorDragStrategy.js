define(["require", "exports", "../userInteractionController", "../../ChartBase"], function (require, exports, userInteractionController_1, ChartBase_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CursorDragStrategy = /** @class */ (function () {
        function CursorDragStrategy(userInteractionController, index) {
            this.dragIsActive = false;
            this.activeCursorIndex = -1;
            this.userInteractionController = userInteractionController;
        }
        CursorDragStrategy.prototype.onMouseHover = function (chart, args, mousePoint) {
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.checkCursorHovering, chart, { mousePoint: mousePoint }));
        };
        CursorDragStrategy.prototype.onClick = function (chart, chartObjectTypeUnderMouse) {
            this.dragIsActive = false;
        };
        CursorDragStrategy.prototype.onDrag = function (chart, args) {
            if (args.objectUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.cursor || this.dragIsActive == true) {
                if (args.objectUnderMouse.args.cursorIndex != undefined && this.dragIsActive == false) {
                    this.activeCursorIndex = args.objectUnderMouse.args.cursorIndex;
                }
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.dragCursor, chart, {
                    cursorIndex: this.activeCursorIndex,
                    movementX: args.mousePoint.x,
                    movementY: args.mousePoint.y,
                }));
                this.dragIsActive = true;
            }
        };
        CursorDragStrategy.prototype.onDragEnd = function (chart) {
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.endCursorDrag, chart, {}));
            this.dragIsActive = false;
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.resetDragPosition, null, {}));
        };
        CursorDragStrategy.prototype.onMouseDown = function (chart, chartObjectUnderMouse) {
            if (chartObjectUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.cursor) {
                this.dragIsActive = true;
                this.activeCursorIndex = chartObjectUnderMouse.args.cursorIndex;
            }
            return chartObjectUnderMouse;
        };
        return CursorDragStrategy;
    }());
    exports.CursorDragStrategy = CursorDragStrategy;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Vyc29yRHJhZ1N0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC93aWRnZXRzL2NoYXJ0V2lkZ2V0L3VzZXJJbnRlcmFjdGlvbi9zdHJhdGVnaWVzL2N1cnNvckRyYWdTdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFNQTtRQU1JLDRCQUFZLHlCQUFxRCxFQUFFLEtBQWE7WUFIaEYsaUJBQVksR0FBRyxLQUFLLENBQUM7WUFDckIsc0JBQWlCLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFHbkIsSUFBSSxDQUFDLHlCQUF5QixHQUFHLHlCQUF5QixDQUFDO1FBQy9ELENBQUM7UUFFRCx5Q0FBWSxHQUFaLFVBQWEsS0FBa0IsRUFBRSxJQUFJLEVBQUUsVUFBVTtZQUM3QyxJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLElBQUksd0RBQTRCLENBQUMsSUFBSSxFQUFFLDRDQUFnQixDQUFDLG1CQUFtQixFQUFFLEtBQUssRUFBRSxFQUFDLFVBQVUsRUFBRyxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUE7UUFDakssQ0FBQztRQUVELG9DQUFPLEdBQVAsVUFBUSxLQUFrQixFQUFFLHlCQUFpRDtZQUN6RSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUM5QixDQUFDO1FBRUQsbUNBQU0sR0FBTixVQUFPLEtBQWtCLEVBQUUsSUFBSTtZQUMzQixJQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLElBQUksMkJBQWUsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLEVBQUM7Z0JBQzVGLElBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksU0FBUyxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksS0FBSyxFQUFDO29CQUNqRixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7aUJBQ25FO2dCQUVELElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLENBQ3pDLElBQUksd0RBQTRCLENBQUMsSUFBSSxFQUNqQyw0Q0FBZ0IsQ0FBQyxVQUFVLEVBQzNCLEtBQUssRUFDTDtvQkFDSSxXQUFXLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtvQkFDbkMsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDNUIsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDL0IsQ0FDSixDQUNKLENBQUE7Z0JBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7YUFDNUI7UUFDTCxDQUFDO1FBRUQsc0NBQVMsR0FBVCxVQUFVLEtBQWtCO1lBQ3hCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsSUFBSSx3REFBNEIsQ0FBQyxJQUFJLEVBQUUsNENBQWdCLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO1lBQ2hJLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1lBRTFCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsSUFBSSx3REFBNEIsQ0FBQyxJQUFJLEVBQUUsNENBQWdCLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDeEksQ0FBQztRQUVELHdDQUFXLEdBQVgsVUFBWSxLQUFrQixFQUFFLHFCQUE4QztZQUMxRSxJQUFHLHFCQUFxQixDQUFDLGVBQWUsSUFBSSwyQkFBZSxDQUFDLE1BQU0sRUFBQztnQkFDL0QsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO2FBQ25FO1lBRUQsT0FBTyxxQkFBcUIsQ0FBQztRQUNqQyxDQUFDO1FBQ0wseUJBQUM7SUFBRCxDQUFDLEFBdERELElBc0RDO0lBR08sZ0RBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUNoYXJ0SW50ZXJhY3Rpb25TdHJhdGVneSB9IGZyb20gXCIuL2NoYXJTdHJhdGVneUludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBDaGFydENvbW1hbmRUeXBlLCBFdmVudEV4ZWN1dGVDaGFydENvbW1hbmRBcmdzIH0gZnJvbSBcIi4uL3VzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgSVVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9jb250cm9sbGVySW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IElUcmFjZUNoYXJ0IH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXMvdHJhY2VDaGFydEludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBDaGFydE9iamVjdFR5cGUsIENoYXJ0T2JqZWN0SW5mb3JtYXRpb24gfSBmcm9tIFwiLi4vLi4vQ2hhcnRCYXNlXCI7XHJcblxyXG5jbGFzcyAgQ3Vyc29yRHJhZ1N0cmF0ZWd5IGltcGxlbWVudHMgSUNoYXJ0SW50ZXJhY3Rpb25TdHJhdGVneXtcclxuICAgIHByaXZhdGUgdXNlckludGVyYWN0aW9uQ29udHJvbGxlcjogSVVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXI7XHJcblxyXG4gICAgZHJhZ0lzQWN0aXZlID0gZmFsc2U7XHJcbiAgICBhY3RpdmVDdXJzb3JJbmRleCA9IC0xO1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3Rvcih1c2VySW50ZXJhY3Rpb25Db250cm9sbGVyOiBJVXNlckludGVyYWN0aW9uQ29udHJvbGxlciwgaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMudXNlckludGVyYWN0aW9uQ29udHJvbGxlciA9IHVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIG9uTW91c2VIb3ZlcihjaGFydDogSVRyYWNlQ2hhcnQsIGFyZ3MsIG1vdXNlUG9pbnQpIHtcclxuICAgICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXIuZXhlY3V0ZUNvbW1hbmQobmV3IEV2ZW50RXhlY3V0ZUNoYXJ0Q29tbWFuZEFyZ3ModGhpcywgQ2hhcnRDb21tYW5kVHlwZS5jaGVja0N1cnNvckhvdmVyaW5nLCBjaGFydCwge21vdXNlUG9pbnQgOiBtb3VzZVBvaW50fSkpXHJcbiAgICB9XHJcblxyXG4gICAgb25DbGljayhjaGFydDogSVRyYWNlQ2hhcnQsIGNoYXJ0T2JqZWN0VHlwZVVuZGVyTW91c2U6IENoYXJ0T2JqZWN0SW5mb3JtYXRpb24pIHtcclxuICAgICAgICB0aGlzLmRyYWdJc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBvbkRyYWcoY2hhcnQ6IElUcmFjZUNoYXJ0LCBhcmdzKSB7XHJcbiAgICAgICAgaWYoYXJncy5vYmplY3RVbmRlck1vdXNlLmNoYXJ0T2JqZWN0VHlwZSA9PSBDaGFydE9iamVjdFR5cGUuY3Vyc29yIHx8IHRoaXMuZHJhZ0lzQWN0aXZlID09IHRydWUpe1xyXG4gICAgICAgICAgICBpZihhcmdzLm9iamVjdFVuZGVyTW91c2UuYXJncy5jdXJzb3JJbmRleCAhPSB1bmRlZmluZWQgJiYgdGhpcy5kcmFnSXNBY3RpdmUgPT0gZmFsc2Upe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVDdXJzb3JJbmRleCA9IGFyZ3Mub2JqZWN0VW5kZXJNb3VzZS5hcmdzLmN1cnNvckluZGV4O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXIuZXhlY3V0ZUNvbW1hbmQoXHJcbiAgICAgICAgICAgICAgICBuZXcgRXZlbnRFeGVjdXRlQ2hhcnRDb21tYW5kQXJncyh0aGlzLCBcclxuICAgICAgICAgICAgICAgICAgICBDaGFydENvbW1hbmRUeXBlLmRyYWdDdXJzb3IsIFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LCBcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvckluZGV4OiB0aGlzLmFjdGl2ZUN1cnNvckluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlbWVudFg6IGFyZ3MubW91c2VQb2ludC54LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlbWVudFk6IGFyZ3MubW91c2VQb2ludC55LFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICB0aGlzLmRyYWdJc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uRHJhZ0VuZChjaGFydDogSVRyYWNlQ2hhcnQpe1xyXG4gICAgICAgIHRoaXMudXNlckludGVyYWN0aW9uQ29udHJvbGxlci5leGVjdXRlQ29tbWFuZChuZXcgRXZlbnRFeGVjdXRlQ2hhcnRDb21tYW5kQXJncyh0aGlzLCBDaGFydENvbW1hbmRUeXBlLmVuZEN1cnNvckRyYWcsIGNoYXJ0LCB7fSkpXHJcbiAgICAgICAgdGhpcy5kcmFnSXNBY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25Db250cm9sbGVyLmV4ZWN1dGVDb21tYW5kKG5ldyBFdmVudEV4ZWN1dGVDaGFydENvbW1hbmRBcmdzKHRoaXMsIENoYXJ0Q29tbWFuZFR5cGUucmVzZXREcmFnUG9zaXRpb24sIG51bGwgLHt9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3VzZURvd24oY2hhcnQ6IElUcmFjZUNoYXJ0LCBjaGFydE9iamVjdFVuZGVyTW91c2UgOiBDaGFydE9iamVjdEluZm9ybWF0aW9uKSA6IENoYXJ0T2JqZWN0SW5mb3JtYXRpb257XHJcbiAgICAgICAgaWYoY2hhcnRPYmplY3RVbmRlck1vdXNlLmNoYXJ0T2JqZWN0VHlwZSA9PSBDaGFydE9iamVjdFR5cGUuY3Vyc29yKXtcclxuICAgICAgICAgICAgdGhpcy5kcmFnSXNBY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZUN1cnNvckluZGV4ID0gY2hhcnRPYmplY3RVbmRlck1vdXNlLmFyZ3MuY3Vyc29ySW5kZXg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY2hhcnRPYmplY3RVbmRlck1vdXNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IHtDdXJzb3JEcmFnU3RyYXRlZ3l9Il19