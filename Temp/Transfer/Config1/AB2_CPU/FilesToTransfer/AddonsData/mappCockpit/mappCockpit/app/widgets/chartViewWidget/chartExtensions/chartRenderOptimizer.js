define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ChartRenderOptimizer = /** @class */ (function () {
        function ChartRenderOptimizer() {
        }
        ChartRenderOptimizer.prototype.getPointsInCanvasBounds = function (point1, point2, canvasWidth, canvasHeight) {
            var direction = { X: point2.X - point1.X, Y: point2.Y - point1.Y };
            //if both points are outside the canvasArea and the line does not cross it set them directly next to the canvas
            if (!this.testIfLineIsInCanvas(point1, point2, canvasWidth, canvasHeight)) {
                if (point1.Y < 0) {
                    point1.Y = -1;
                    point2.Y = -1;
                }
                if (point1.Y > canvasHeight) {
                    point1.Y = canvasHeight + 1;
                    point2.Y = canvasHeight + 1;
                }
                if (point1.X < 0) {
                    point1.X = -1;
                    point2.X = -1;
                }
                if (point1.X > canvasWidth) {
                    point1.X = canvasWidth + 1;
                    point2.X = canvasWidth + 1;
                }
            }
            else {
                point1 = this.calculatePointPosition(point1, direction, canvasWidth, canvasHeight);
                point2 = this.calculatePointPosition(point2, direction, canvasWidth, canvasHeight);
            }
            return { point1: point1, point2: point2 };
        };
        ChartRenderOptimizer.prototype.testIfLineIsInCanvas = function (point1, point2, canvasWidth, canvasHeight) {
            if (point1.X < 0 && point2.X < 0) {
                return false;
            }
            if (point1.X > canvasWidth && point2.X > canvasWidth) {
                return false;
            }
            if (point1.Y < 0 && point2.Y < 0) {
                return false;
            }
            if (point1.Y > canvasHeight && point2.Y > canvasHeight) {
                return false;
            }
            return true;
        };
        ChartRenderOptimizer.prototype.calculatePointPosition = function (point, direction, canvasWidth, canvasHeight) {
            var p1 = { X: point.X, Y: point.Y };
            var v = direction;
            if (p1.X < 0) {
                var l = (p1.X / v.X) * -1;
                p1.X = 0;
                p1.Y = p1.Y + l * v.Y;
            }
            if (p1.Y < 0) {
                var l = (p1.Y / v.Y) * -1;
                p1.Y = 0;
                p1.X = p1.X + l * v.X;
            }
            if (p1.X > canvasWidth) {
                var l = (canvasWidth / v.X) - (p1.X / v.X);
                p1.X = canvasWidth;
                p1.Y = p1.Y + l * v.Y;
            }
            if (p1.Y > canvasHeight) {
                var l = (canvasHeight / v.Y) - (p1.Y / v.Y);
                p1.Y = canvasHeight;
                p1.X = p1.X + l * v.X;
            }
            return p1;
        };
        return ChartRenderOptimizer;
    }());
    exports.ChartRenderOptimizer = ChartRenderOptimizer;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnRSZW5kZXJPcHRpbWl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYXBwL3dpZGdldHMvY2hhcnRWaWV3V2lkZ2V0L2NoYXJ0RXh0ZW5zaW9ucy9jaGFydFJlbmRlck9wdGltaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFBQTtRQUFBO1FBdUZBLENBQUM7UUFwRkcsc0RBQXVCLEdBQXZCLFVBQXdCLE1BQWMsRUFBRSxNQUFhLEVBQUUsV0FBbUIsRUFBRSxZQUFxQjtZQUM3RixJQUFJLFNBQVMsR0FBRyxFQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFBO1lBRWhFLCtHQUErRztZQUMvRyxJQUFHLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFlBQVksQ0FBQyxFQUFDO2dCQUNyRSxJQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDO29CQUNaLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ2QsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDakI7Z0JBQ0QsSUFBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLFlBQVksRUFBQztvQkFDdkIsTUFBTSxDQUFDLENBQUMsR0FBRyxZQUFZLEdBQUUsQ0FBQyxDQUFDO29CQUMzQixNQUFNLENBQUMsQ0FBQyxHQUFHLFlBQVksR0FBRSxDQUFDLENBQUM7aUJBQzlCO2dCQUVELElBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUM7b0JBQ1osTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDZCxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lC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LEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN6QjtZQUVELElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxZQUFZLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QyxFQUFFLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQztnQkFDcEIsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3pCO1lBRUQsT0FBTyxFQUFFLENBQUM7UUFFZCxDQUFDO1FBRUwsMkJBQUM7SUFBRCxDQUFDLEFBdkZELElBdUZDO0lBdkZZLG9EQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBDaGFydFJlbmRlck9wdGltaXplcntcclxuICAgIFxyXG5cclxuICAgIGdldFBvaW50c0luQ2FudmFzQm91bmRzKHBvaW50MSA6IHtYLFl9LCBwb2ludDI6IHtYLFl9LCBjYW52YXNXaWR0aDogbnVtYmVyLCBjYW52YXNIZWlnaHQgOiBudW1iZXIpe1xyXG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSB7WDogcG9pbnQyLlggLSBwb2ludDEuWCwgWTogcG9pbnQyLlkgLSBwb2ludDEuWX1cclxuXHJcbiAgICAgICAgLy9pZiBib3RoIHBvaW50cyBhcmUgb3V0c2lkZSB0aGUgY2FudmFzQXJlYSBhbmQgdGhlIGxpbmUgZG9lcyBub3QgY3Jvc3MgaXQgc2V0IHRoZW0gZGlyZWN0bHkgbmV4dCB0byB0aGUgY2FudmFzXHJcbiAgICAgICAgaWYoIXRoaXMudGVzdElmTGluZUlzSW5DYW52YXMocG9pbnQxLCBwb2ludDIsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpKXtcclxuICAgICAgICAgICAgaWYocG9pbnQxLlkgPCAwKXtcclxuICAgICAgICAgICAgICAgIHBvaW50MS5ZID0gLTE7XHJcbiAgICAgICAgICAgICAgICBwb2ludDIuWSA9IC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHBvaW50MS5ZID4gY2FudmFzSGVpZ2h0KXtcclxuICAgICAgICAgICAgICAgIHBvaW50MS5ZID0gY2FudmFzSGVpZ2h0ICsxO1xyXG4gICAgICAgICAgICAgICAgcG9pbnQyLlkgPSBjYW52YXNIZWlnaHQgKzE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKHBvaW50MS5YIDwgMCl7XHJcbiAgICAgICAgICAgICAgICBwb2ludDEuWCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgcG9pbnQyLlggPSAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihwb2ludDEuWCA+IGNhbnZhc1dpZHRoKXtcclxuICAgICAgICAgICAgICAgIHBvaW50MS5YID0gY2FudmFzV2lkdGggKyAxO1xyXG4gICAgICAgICAgICAgICAgcG9pbnQyLlggPSBjYW52YXNXaWR0aCArIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIHBvaW50MSA9IHRoaXMuY2FsY3VsYXRlUG9pbnRQb3NpdGlvbihwb2ludDEsIGRpcmVjdGlvbiwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XHJcbiAgICAgICAgICAgIHBvaW50MiA9IHRoaXMuY2FsY3VsYXRlUG9pbnRQb3NpdGlvbihwb2ludDIsIGRpcmVjdGlvbiwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7cG9pbnQxOiBwb2ludDEsIHBvaW50Mjpwb2ludDJ9O1xyXG4gICAgfVxyXG5cclxuICAgIHRlc3RJZkxpbmVJc0luQ2FudmFzKHBvaW50MSwgcG9pbnQyLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KXtcclxuICAgICAgICBpZihwb2ludDEuWCA8IDAgJiYgcG9pbnQyLlggPCAwKXtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYocG9pbnQxLlggPiBjYW52YXNXaWR0aCAmJiBwb2ludDIuWCA+IGNhbnZhc1dpZHRoKXtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYocG9pbnQxLlkgPCAwICYmIHBvaW50Mi5ZIDwgMCl7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKHBvaW50MS5ZID4gY2FudmFzSGVpZ2h0ICYmIHBvaW50Mi5ZID4gY2FudmFzSGVpZ2h0KXtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY3VsYXRlUG9pbnRQb3NpdGlvbihwb2ludCA6IHtYLFl9LCBkaXJlY3Rpb246IHtYLFl9LCBjYW52YXNXaWR0aDogbnVtYmVyLCBjYW52YXNIZWlnaHQgOiBudW1iZXIpe1xyXG4gICAgICAgIHZhciBwMSA9IHtYOiBwb2ludC5YLCBZOiBwb2ludC5ZfTtcclxuICAgICAgICB2YXIgdiA9IGRpcmVjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgaWYgKHAxLlggPCAwKSB7XHJcbiAgICAgICAgICAgIHZhciBsID0gKHAxLlggLyB2LlgpICogLTFcclxuICAgICAgICAgICAgcDEuWCA9IDA7XHJcbiAgICAgICAgICAgIHAxLlkgPSBwMS5ZICsgbCAqIHYuWTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwMS5ZIDwgMCkge1xyXG4gICAgICAgICAgICB2YXIgbCA9IChwMS5ZIC8gdi5ZKSAqIC0xXHJcbiAgICAgICAgICAgIHAxLlkgPSAwO1xyXG4gICAgICAgICAgICBwMS5YID0gcDEuWCArIGwgKiB2Llg7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHAxLlggPiBjYW52YXNXaWR0aCkge1xyXG4gICAgICAgICAgICB2YXIgbCA9IChjYW52YXNXaWR0aCAvIHYuWCkgLSAocDEuWCAvIHYuWCk7XHJcbiAgICAgICAgICAgIHAxLlggPSBjYW52YXNXaWR0aDtcclxuICAgICAgICAgICAgcDEuWSA9IHAxLlkgKyBsICogdi5ZO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHAxLlkgPiBjYW52YXNIZWlnaHQpIHtcclxuICAgICAgICAgICAgdmFyIGwgPSAoY2FudmFzSGVpZ2h0IC8gdi5ZKSAtIChwMS5ZIC8gdi5ZKTtcclxuICAgICAgICAgICAgcDEuWSA9IGNhbnZhc0hlaWdodDtcclxuICAgICAgICAgICAgcDEuWCA9IHAxLlggKyBsICogdi5YO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHAxO1xyXG4gICAgICAgXHJcbiAgICB9XHJcblxyXG59Il19