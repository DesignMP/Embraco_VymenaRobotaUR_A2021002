define(["require", "exports", "../../../common/packageConversion/enum/objectTypeEnum", "../../../common/packageConversion/exportContainer", "../../../common/persistence/settings", "../../../common/packageConversion/enum/dataTypeEnum", "../../../common/packageConversion/enum/additionalMetaKeys", "../../../common/packageConversion/mceConversionError", "../../../common/packageConversion/enum/arrayTypeEnum", "../../../common/packageConversion/meta", "../../../common/packageConversion/package", "./seriesProvider", "../../chartManagerDataModel/settingIds"], function (require, exports, objectTypeEnum_1, exportContainer_1, settings_1, dataTypeEnum_1, additionalMetaKeys_1, mceConversionError_1, arrayTypeEnum_1, meta_1, package_1, seriesProvider_1, settingIds_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DataIds;
    (function (DataIds) {
        DataIds["Series"] = "series";
    })(DataIds || (DataIds = {}));
    var SeriesProviderPackageAdapter = /** @class */ (function () {
        function SeriesProviderPackageAdapter() {
            //newest version of the package format
            this.currentPackageVersion = 1;
            //define settings key for value series as there is no SettingIds object provided
            this.seriesSettingsKey = "series";
            this.seriesIdsSettingsKey = "seriesIds";
            this.settingsType = "SeriesProvider";
            this.objectType = objectTypeEnum_1.ObjectType.SERIESPROVIDER;
        }
        SeriesProviderPackageAdapter.prototype.packageToSetting = function (packageData, container) {
            var _a, _b, _c;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_a = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _a === void 0 ? void 0 : _a.dataType) == dataTypeEnum_1.DataType.OBJECT && ((_b = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _b === void 0 ? void 0 : _b[additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE]) == this.objectType) {
                switch ((_c = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _c === void 0 ? void 0 : _c[additionalMetaKeys_1.AdditionalMetaKeys.VERSION]) {
                    case 1:
                        setting = this.packageV1ToSetting(packageData, container);
                        break;
                    default:
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.objectType);
                }
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_TYPE, this.objectType);
            }
            return setting;
        };
        SeriesProviderPackageAdapter.prototype.packageV1ToSetting = function (packageData, container) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_c = (_b = (_a = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _a === void 0 ? void 0 : _a[DataIds.Series]) === null || _b === void 0 ? void 0 : _b.meta) === null || _c === void 0 ? void 0 : _c.dataType) == dataTypeEnum_1.DataType.ARRAY && ((_f = (_e = (_d = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _d === void 0 ? void 0 : _d[DataIds.Series]) === null || _e === void 0 ? void 0 : _e.meta) === null || _f === void 0 ? void 0 : _f[additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE]) === arrayTypeEnum_1.ArrayType.LINK) {
                var seriesSettingsArray_1 = new Array();
                var serieIds_1 = new Array();
                var seriesData = (_h = (_g = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _g === void 0 ? void 0 : _g[DataIds.Series]) === null || _h === void 0 ? void 0 : _h.data;
                if (seriesData != undefined) {
                    seriesData.forEach(function (id) {
                        var _a;
                        var seriesSetting = container.getSettingsByID(id);
                        if (seriesSetting !== null) {
                            seriesSettingsArray_1.push(seriesSetting);
                            serieIds_1.push(seriesProvider_1.SeriesProvider.getSeriesPersistingIdForComponent(seriesSetting.data[settingIds_1.SettingIds.SeriesId], (_a = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _a === void 0 ? void 0 : _a[additionalMetaKeys_1.AdditionalMetaKeys.KEY]));
                        }
                        else {
                            throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.Series);
                        }
                    });
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.Series);
                }
                setting.setValue(this.seriesSettingsKey, seriesSettingsArray_1);
                setting.setValue(this.seriesIdsSettingsKey, serieIds_1);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.Series);
            }
            return setting;
        };
        SeriesProviderPackageAdapter.prototype.settingToPackage = function (settingsData) {
            var settings = settings_1.Settings.create(settingsData);
            var serieProviderData = {};
            var packageStructure = {
                packages: new Array(),
                topLevelID: NaN
            };
            if (settings.type === this.settingsType) {
                var id = meta_1.Meta.createID();
                var additionalMetaInfo = [{ key: additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE, value: this.objectType }, { key: additionalMetaKeys_1.AdditionalMetaKeys.ID, value: id }, { key: additionalMetaKeys_1.AdditionalMetaKeys.VERSION, value: this.currentPackageVersion }];
                var seriesProviderMeta = new meta_1.Meta(dataTypeEnum_1.DataType.OBJECT, additionalMetaInfo);
                var seriesMeta = new meta_1.Meta(dataTypeEnum_1.DataType.ARRAY, [{ key: additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE, value: arrayTypeEnum_1.ArrayType.LINK }]);
                var seriesLinks_1 = new Array();
                var seriesData = settings.getValue(this.seriesSettingsKey);
                if (seriesData !== undefined) {
                    seriesData.forEach(function (setting) {
                        var _a;
                        var seriesPackages = exportContainer_1.ExportContainer.createPackages(setting);
                        if (seriesPackages.packages.length > 0 && !Number.isNaN(seriesPackages.topLevelID)) {
                            seriesLinks_1.push(seriesPackages.topLevelID);
                            (_a = packageStructure.packages).push.apply(_a, seriesPackages.packages);
                        }
                    });
                    serieProviderData[DataIds.Series] = new package_1.Package(seriesMeta, seriesLinks_1);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, this.seriesSettingsKey);
                }
                var seriesProviderPackage = new package_1.Package(seriesProviderMeta, serieProviderData);
                packageStructure.packages.push(seriesProviderPackage);
                packageStructure.topLevelID = id;
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.settingsType);
            }
            return packageStructure;
        };
        return SeriesProviderPackageAdapter;
    }());
    exports.SeriesProviderPackageAdapter = SeriesProviderPackageAdapter;
});
//# sourceMappingURL=data:application/json;base64,