define(["require", "exports", "../userInteractionController", "../../ChartBase"], function (require, exports, userInteractionController_1, ChartBase_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ChartBoxZoomStrategy = /** @class */ (function () {
        function ChartBoxZoomStrategy(userInteractionController) {
            this.dragIsActive = false;
            this.userInteractionController = userInteractionController;
        }
        ChartBoxZoomStrategy.prototype.onMouseHover = function (chart) {
        };
        ChartBoxZoomStrategy.prototype.onClick = function (chart) {
        };
        ChartBoxZoomStrategy.prototype.onMouseDown = function (chart, chartObjectTypeUnderMouse, mousePoint) {
            if (chartObjectTypeUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.cursor) {
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.togglePanning, chart, { boxZoomEnabled: false }));
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.toggleBoxZoom, chart, { panningEnabled: false }));
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.setCursorOnPointerPosition, chart, { cursorIndex: chartObjectTypeUnderMouse.args.cursorIndex, mousePoint: mousePoint }));
            }
            return chartObjectTypeUnderMouse;
        };
        ChartBoxZoomStrategy.prototype.onDrag = function (chart, args) {
            if (args.objectUnderMouse.chartObjectType != ChartBase_1.ChartObjectType.cursor && args.objectUnderMouse.chartObjectType != ChartBase_1.ChartObjectType.axis || this.dragIsActive == true) {
                this.dragIsActive = true;
            }
        };
        ChartBoxZoomStrategy.prototype.onDragEnd = function (chart) {
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.endCursorDrag, chart, {}));
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.toggleBoxZoom, chart, { boxZoomEnabled: true }));
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.togglePanning, chart, { panningEnabled: false }));
            this.dragIsActive = false;
        };
        return ChartBoxZoomStrategy;
    }());
    exports.ChartBoxZoomStrategy = ChartBoxZoomStrategy;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnRCb3hab29tU3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvYXBwL3dpZGdldHMvY2hhcnRWaWV3V2lkZ2V0L3VzZXJJbnRlcmFjdGlvbi9zdHJhdGVnaWVzL2NoYXJ0Qm94Wm9vbVN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztJQU9BO1FBTUksOEJBQVkseUJBQXFEO1lBRmpFLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1lBR2pCLElBQUksQ0FBQyx5QkFBeUIsR0FBRyx5QkFBeUIsQ0FBQztRQUMvRCxDQUFDO1FBRUQsMkNBQVksR0FBWixVQUFhLEtBQWtCO1FBRS9CLENBQUM7UUFFRCxzQ0FBTyxHQUFQLFVBQVEsS0FBa0I7UUFFMUIsQ0FBQztRQUVELDBDQUFXLEdBQVgsVUFBWSxLQUFrQixFQUFFLHlCQUFpRCxFQUFFLFVBQWtCO1lBQ2pHLElBQUcseUJBQXlCLENBQUMsZUFBZSxJQUFJLDJCQUFlLENBQUMsTUFBTSxFQUFFO2dCQUNwRSxJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLElBQUksd0RBQTRCLENBQUMsSUFBSSxFQUFFLDRDQUFnQixDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBQyxjQUFjLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0SixJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLElBQUksd0RBQTRCLENBQUMsSUFBSSxFQUFFLDRDQUFnQixDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBQyxjQUFjLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0SixJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLElBQUksd0RBQTRCLENBQUMsSUFBSSxFQUFFLDRDQUFnQixDQUFDLDBCQUEwQixFQUFFLEtBQUssRUFBRSxFQUFDLFdBQVcsRUFBRSx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUM7YUFDaE87WUFFRCxPQUFPLHlCQUF5QixDQUFDO1FBQ3JDLENBQUM7UUFHRCxxQ0FBTSxHQUFOLFVBQU8sS0FBa0IsRUFBRSxJQUFJO1lBQzNCLElBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsSUFBSSwyQkFBZSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxJQUFJLDJCQUFlLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxFQUFDO2dCQUM3SixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQzthQUM1QjtRQUNMLENBQUM7UUFFRCx3Q0FBUyxHQUFULFVBQVUsS0FBa0I7WUFDeEIsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsQ0FBQyxJQUFJLHdEQUE0QixDQUFDLElBQUksRUFBRSw0Q0FBZ0IsQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDaEksSUFBSSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsQ0FBQyxJQUFJLHdEQUE0QixDQUFDLElBQUksRUFBRSw0Q0FBZ0IsQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLEVBQUMsY0FBYyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQTtZQUNwSixJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLElBQUksd0RBQTRCLENBQUMsSUFBSSxFQUFFLDRDQUFnQixDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBQyxjQUFjLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3JKLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzlCLENBQUM7UUFJTCwyQkFBQztJQUFELENBQUMsQUE1Q0QsSUE0Q0M7SUFJTyxvREFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ2hhcnRJbnRlcmFjdGlvblN0cmF0ZWd5IH0gZnJvbSBcIi4vY2hhclN0cmF0ZWd5SW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IENoYXJ0Q29tbWFuZFR5cGUsIEV2ZW50RXhlY3V0ZUNoYXJ0Q29tbWFuZEFyZ3MgfSBmcm9tIFwiLi4vdXNlckludGVyYWN0aW9uQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBJVXNlckludGVyYWN0aW9uQ29udHJvbGxlciB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2NvbnRyb2xsZXJJbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgSVRyYWNlQ2hhcnQgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy90cmFjZUNoYXJ0SW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IENoYXJ0T2JqZWN0VHlwZSwgQ2hhcnRPYmplY3RJbmZvcm1hdGlvbiB9IGZyb20gXCIuLi8uLi9DaGFydEJhc2VcIjtcclxuaW1wb3J0IHsgSVBvaW50IH0gZnJvbSBcIi4uLy4uLy4uLy4uL21vZGVscy9jb21tb24vaW50ZXJmYWNlcy9wb2ludEludGVyZmFjZVwiO1xyXG5cclxuY2xhc3MgIENoYXJ0Qm94Wm9vbVN0cmF0ZWd5IGltcGxlbWVudHMgSUNoYXJ0SW50ZXJhY3Rpb25TdHJhdGVneXtcclxuICAgIFxyXG4gICAgcHJpdmF0ZSB1c2VySW50ZXJhY3Rpb25Db250cm9sbGVyOiBJVXNlckludGVyYWN0aW9uQ29udHJvbGxlcjtcclxuICAgIFxyXG4gICAgZHJhZ0lzQWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IodXNlckludGVyYWN0aW9uQ29udHJvbGxlcjogSVVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXIpIHtcclxuICAgICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXIgPSB1c2VySW50ZXJhY3Rpb25Db250cm9sbGVyO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTW91c2VIb3ZlcihjaGFydDogSVRyYWNlQ2hhcnQpIHtcclxuXHJcbiAgICB9XHJcbiAgICBcclxuICAgIG9uQ2xpY2soY2hhcnQ6IElUcmFjZUNoYXJ0KSB7XHJcbiAgICAgIFxyXG4gICAgfSAgIFxyXG4gICAgXHJcbiAgICBvbk1vdXNlRG93bihjaGFydDogSVRyYWNlQ2hhcnQsIGNoYXJ0T2JqZWN0VHlwZVVuZGVyTW91c2U6IENoYXJ0T2JqZWN0SW5mb3JtYXRpb24sIG1vdXNlUG9pbnQ6IElQb2ludCkgOiBDaGFydE9iamVjdEluZm9ybWF0aW9ue1xyXG4gICAgICAgIGlmKGNoYXJ0T2JqZWN0VHlwZVVuZGVyTW91c2UuY2hhcnRPYmplY3RUeXBlID09IENoYXJ0T2JqZWN0VHlwZS5jdXJzb3IgKXtcclxuICAgICAgICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25Db250cm9sbGVyLmV4ZWN1dGVDb21tYW5kKG5ldyBFdmVudEV4ZWN1dGVDaGFydENvbW1hbmRBcmdzKHRoaXMsIENoYXJ0Q29tbWFuZFR5cGUudG9nZ2xlUGFubmluZywgY2hhcnQsIHtib3hab29tRW5hYmxlZDogZmFsc2V9KSk7XHJcbiAgICAgICAgICAgIHRoaXMudXNlckludGVyYWN0aW9uQ29udHJvbGxlci5leGVjdXRlQ29tbWFuZChuZXcgRXZlbnRFeGVjdXRlQ2hhcnRDb21tYW5kQXJncyh0aGlzLCBDaGFydENvbW1hbmRUeXBlLnRvZ2dsZUJveFpvb20sIGNoYXJ0LCB7cGFubmluZ0VuYWJsZWQ6IGZhbHNlfSkpO1xyXG4gICAgICAgICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXIuZXhlY3V0ZUNvbW1hbmQobmV3IEV2ZW50RXhlY3V0ZUNoYXJ0Q29tbWFuZEFyZ3ModGhpcywgQ2hhcnRDb21tYW5kVHlwZS5zZXRDdXJzb3JPblBvaW50ZXJQb3NpdGlvbiwgY2hhcnQsIHtjdXJzb3JJbmRleDogY2hhcnRPYmplY3RUeXBlVW5kZXJNb3VzZS5hcmdzLmN1cnNvckluZGV4LCBtb3VzZVBvaW50OiBtb3VzZVBvaW50fSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNoYXJ0T2JqZWN0VHlwZVVuZGVyTW91c2U7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBvbkRyYWcoY2hhcnQ6IElUcmFjZUNoYXJ0LCBhcmdzKSB7XHJcbiAgICAgICAgaWYoYXJncy5vYmplY3RVbmRlck1vdXNlLmNoYXJ0T2JqZWN0VHlwZSAhPSBDaGFydE9iamVjdFR5cGUuY3Vyc29yICYmIGFyZ3Mub2JqZWN0VW5kZXJNb3VzZS5jaGFydE9iamVjdFR5cGUgIT0gQ2hhcnRPYmplY3RUeXBlLmF4aXMgfHwgdGhpcy5kcmFnSXNBY3RpdmUgPT0gdHJ1ZSl7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhZ0lzQWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25EcmFnRW5kKGNoYXJ0OiBJVHJhY2VDaGFydCl7XHJcbiAgICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25Db250cm9sbGVyLmV4ZWN1dGVDb21tYW5kKG5ldyBFdmVudEV4ZWN1dGVDaGFydENvbW1hbmRBcmdzKHRoaXMsIENoYXJ0Q29tbWFuZFR5cGUuZW5kQ3Vyc29yRHJhZywgY2hhcnQsIHt9KSlcclxuICAgICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXIuZXhlY3V0ZUNvbW1hbmQobmV3IEV2ZW50RXhlY3V0ZUNoYXJ0Q29tbWFuZEFyZ3ModGhpcywgQ2hhcnRDb21tYW5kVHlwZS50b2dnbGVCb3hab29tLCBjaGFydCwge2JveFpvb21FbmFibGVkOiB0cnVlfSkpXHJcbiAgICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25Db250cm9sbGVyLmV4ZWN1dGVDb21tYW5kKG5ldyBFdmVudEV4ZWN1dGVDaGFydENvbW1hbmRBcmdzKHRoaXMsIENoYXJ0Q29tbWFuZFR5cGUudG9nZ2xlUGFubmluZywgY2hhcnQsIHtwYW5uaW5nRW5hYmxlZDogZmFsc2V9KSlcclxuICAgICAgICB0aGlzLmRyYWdJc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCB7Q2hhcnRCb3hab29tU3RyYXRlZ3l9Il19