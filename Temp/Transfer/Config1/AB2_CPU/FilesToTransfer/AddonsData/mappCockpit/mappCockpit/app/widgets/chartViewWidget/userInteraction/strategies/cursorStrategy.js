define(["require", "exports", "../userInteractionController", "../../ChartBase"], function (require, exports, userInteractionController_1, ChartBase_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CursorInteractionStrategy = /** @class */ (function () {
        function CursorInteractionStrategy(userInteractionController, index) {
            this.index = 0;
            this.dragIsActive = false;
            this.userInteractionController = userInteractionController;
            this.index = index;
        }
        CursorInteractionStrategy.prototype.onMouseHover = function (chart, args, mousePoint) {
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.checkCursorHovering, chart, { mousePoint: mousePoint }));
        };
        CursorInteractionStrategy.prototype.onClick = function (chart, chartObjectUnderMouse, mousePoint) {
            if (chartObjectUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.cursor) {
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.setCursorOnPointerPosition, chart, { cursorIndex: chartObjectUnderMouse.args.cursorIndex, mousePoint: mousePoint }));
            }
            else if (chartObjectUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.chartSpace) {
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.setCursorOnPointerPosition, chart, { cursorIndex: this.index, mousePoint: mousePoint }));
            }
            chartObjectUnderMouse.chartObjectType = ChartBase_1.ChartObjectType.cursor;
            return chartObjectUnderMouse;
        };
        CursorInteractionStrategy.prototype.onDrag = function (chart) {
        };
        CursorInteractionStrategy.prototype.onDragEnd = function (chart) {
        };
        CursorInteractionStrategy.prototype.onMouseDown = function (chart, chartObjectUnderMouse, mousePoint) {
            if (chartObjectUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.cursor) {
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.setCursorOnPointerPosition, chart, { cursorIndex: chartObjectUnderMouse.args.cursorIndex, mousePoint: mousePoint }));
            }
            else if (chartObjectUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.chartSpace) {
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.setCursorOnPointerPosition, chart, { cursorIndex: this.index, mousePoint: mousePoint }));
                chartObjectUnderMouse.args.cursorIndex = this.index;
                chartObjectUnderMouse.chartObjectType = ChartBase_1.ChartObjectType.cursor;
            }
            return chartObjectUnderMouse;
        };
        return CursorInteractionStrategy;
    }());
    exports.CursorInteractionStrategy = CursorInteractionStrategy;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Vyc29yU3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvYXBwL3dpZGdldHMvY2hhcnRWaWV3V2lkZ2V0L3VzZXJJbnRlcmFjdGlvbi9zdHJhdGVnaWVzL2N1cnNvclN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztJQU9BO1FBTUksbUNBQVkseUJBQXFELEVBQUUsS0FBYTtZQUx4RSxVQUFLLEdBQUcsQ0FBQyxDQUFDO1lBR2xCLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1lBR2pCLElBQUksQ0FBQyx5QkFBeUIsR0FBRyx5QkFBeUIsQ0FBQztZQUMzRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUN2QixDQUFDO1FBRUQsZ0RBQVksR0FBWixVQUFhLEtBQWtCLEVBQUUsSUFBSSxFQUFFLFVBQVU7WUFDN0MsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsQ0FBQyxJQUFJLHdEQUE0QixDQUFDLElBQUksRUFBRSw0Q0FBZ0IsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLEVBQUUsRUFBQyxVQUFVLEVBQUcsVUFBVSxFQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2pLLENBQUM7UUFFRCwyQ0FBTyxHQUFQLFVBQVEsS0FBa0IsRUFBRSxxQkFBOEMsRUFBRSxVQUFrQjtZQUMxRixJQUFHLHFCQUFxQixDQUFDLGVBQWUsSUFBSSwyQkFBZSxDQUFDLE1BQU0sRUFBQztnQkFDL0QsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsQ0FBQyxJQUFJLHdEQUE0QixDQUFDLElBQUksRUFBRSw0Q0FBZ0IsQ0FBQywwQkFBMEIsRUFBRSxLQUFLLEVBQUUsRUFBQyxXQUFXLEVBQUUscUJBQXFCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQyxDQUFBO2FBQzNOO2lCQUNJLElBQUcscUJBQXFCLENBQUMsZUFBZSxJQUFJLDJCQUFlLENBQUMsVUFBVSxFQUFDO2dCQUN4RSxJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLElBQUksd0RBQTRCLENBQUMsSUFBSSxFQUFFLDRDQUFnQixDQUFDLDBCQUEwQixFQUFFLEtBQUssRUFBRSxFQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUE7YUFDL0w7WUFDRCxxQkFBcUIsQ0FBQyxlQUFlLEdBQUcsMkJBQWUsQ0FBQyxNQUFNLENBQUM7WUFDL0QsT0FBTyxxQkFBcUIsQ0FBQztRQUNqQyxDQUFDO1FBRUQsMENBQU0sR0FBTixVQUFPLEtBQWtCO1FBQ3pCLENBQUM7UUFFRCw2Q0FBUyxHQUFULFVBQVUsS0FBa0I7UUFDNUIsQ0FBQztRQUVELCtDQUFXLEdBQVgsVUFBWSxLQUFrQixFQUFFLHFCQUE4QyxFQUFFLFVBQWtCO1lBQzlGLElBQUcscUJBQXFCLENBQUMsZUFBZSxJQUFJLDJCQUFlLENBQUMsTUFBTSxFQUFDO2dCQUMvRCxJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLElBQUksd0RBQTRCLENBQUMsSUFBSSxFQUFFLDRDQUFnQixDQUFDLDBCQUEwQixFQUFFLEtBQUssRUFBRSxFQUFDLFdBQVcsRUFBRSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUE7YUFDM047aUJBQ0ksSUFBRyxxQkFBcUIsQ0FBQyxlQUFlLElBQUksMkJBQWUsQ0FBQyxVQUFVLEVBQUM7Z0JBQ3hFLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsSUFBSSx3REFBNEIsQ0FBQyxJQUFJLEVBQUUsNENBQWdCLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxFQUFFLEVBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBQyxDQUFDLENBQUMsQ0FBQTtnQkFDNUwscUJBQXFCLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUVwRCxxQkFBcUIsQ0FBQyxlQUFlLEdBQUcsMkJBQWUsQ0FBQyxNQUFNLENBQUM7YUFFbEU7WUFFRCxPQUFPLHFCQUFxQixDQUFDO1FBQ2pDLENBQUM7UUFDTCxnQ0FBQztJQUFELENBQUMsQUE5Q0QsSUE4Q0M7SUFFTyw4REFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ2hhcnRJbnRlcmFjdGlvblN0cmF0ZWd5IH0gZnJvbSBcIi4vY2hhclN0cmF0ZWd5SW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IENoYXJ0Q29tbWFuZFR5cGUsIEV2ZW50RXhlY3V0ZUNoYXJ0Q29tbWFuZEFyZ3MgfSBmcm9tIFwiLi4vdXNlckludGVyYWN0aW9uQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBJVXNlckludGVyYWN0aW9uQ29udHJvbGxlciB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2NvbnRyb2xsZXJJbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgSVRyYWNlQ2hhcnQgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy90cmFjZUNoYXJ0SW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IENoYXJ0T2JqZWN0VHlwZSwgQ2hhcnRPYmplY3RJbmZvcm1hdGlvbiB9IGZyb20gXCIuLi8uLi9DaGFydEJhc2VcIjtcclxuaW1wb3J0IHsgSVBvaW50IH0gZnJvbSBcIi4uLy4uLy4uLy4uL21vZGVscy9jb21tb24vaW50ZXJmYWNlcy9wb2ludEludGVyZmFjZVwiO1xyXG5cclxuY2xhc3MgIEN1cnNvckludGVyYWN0aW9uU3RyYXRlZ3kgaW1wbGVtZW50cyBJQ2hhcnRJbnRlcmFjdGlvblN0cmF0ZWd5e1xyXG4gICAgcHJpdmF0ZSBpbmRleCA9IDA7XHJcbiAgICBwcml2YXRlIHVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXI6IElVc2VySW50ZXJhY3Rpb25Db250cm9sbGVyO1xyXG5cclxuICAgIGRyYWdJc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3Rvcih1c2VySW50ZXJhY3Rpb25Db250cm9sbGVyOiBJVXNlckludGVyYWN0aW9uQ29udHJvbGxlciwgaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMudXNlckludGVyYWN0aW9uQ29udHJvbGxlciA9IHVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXI7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBvbk1vdXNlSG92ZXIoY2hhcnQ6IElUcmFjZUNoYXJ0LCBhcmdzLCBtb3VzZVBvaW50KSB7XHJcbiAgICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25Db250cm9sbGVyLmV4ZWN1dGVDb21tYW5kKG5ldyBFdmVudEV4ZWN1dGVDaGFydENvbW1hbmRBcmdzKHRoaXMsIENoYXJ0Q29tbWFuZFR5cGUuY2hlY2tDdXJzb3JIb3ZlcmluZywgY2hhcnQsIHttb3VzZVBvaW50IDogbW91c2VQb2ludH0pKVxyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xpY2soY2hhcnQ6IElUcmFjZUNoYXJ0LCBjaGFydE9iamVjdFVuZGVyTW91c2UgOiBDaGFydE9iamVjdEluZm9ybWF0aW9uLCBtb3VzZVBvaW50OiBJUG9pbnQpIDogQ2hhcnRPYmplY3RJbmZvcm1hdGlvbntcclxuICAgICAgICBpZihjaGFydE9iamVjdFVuZGVyTW91c2UuY2hhcnRPYmplY3RUeXBlID09IENoYXJ0T2JqZWN0VHlwZS5jdXJzb3Ipe1xyXG4gICAgICAgICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXIuZXhlY3V0ZUNvbW1hbmQobmV3IEV2ZW50RXhlY3V0ZUNoYXJ0Q29tbWFuZEFyZ3ModGhpcywgQ2hhcnRDb21tYW5kVHlwZS5zZXRDdXJzb3JPblBvaW50ZXJQb3NpdGlvbiwgY2hhcnQsIHtjdXJzb3JJbmRleDogY2hhcnRPYmplY3RVbmRlck1vdXNlLmFyZ3MuY3Vyc29ySW5kZXgsIG1vdXNlUG9pbnQ6IG1vdXNlUG9pbnR9KSlcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihjaGFydE9iamVjdFVuZGVyTW91c2UuY2hhcnRPYmplY3RUeXBlID09IENoYXJ0T2JqZWN0VHlwZS5jaGFydFNwYWNlKXtcclxuICAgICAgICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25Db250cm9sbGVyLmV4ZWN1dGVDb21tYW5kKG5ldyBFdmVudEV4ZWN1dGVDaGFydENvbW1hbmRBcmdzKHRoaXMsIENoYXJ0Q29tbWFuZFR5cGUuc2V0Q3Vyc29yT25Qb2ludGVyUG9zaXRpb24sIGNoYXJ0LCB7Y3Vyc29ySW5kZXg6IHRoaXMuaW5kZXgsIG1vdXNlUG9pbnQ6IG1vdXNlUG9pbnR9KSlcclxuICAgICAgICB9XHJcbiAgICAgICAgY2hhcnRPYmplY3RVbmRlck1vdXNlLmNoYXJ0T2JqZWN0VHlwZSA9IENoYXJ0T2JqZWN0VHlwZS5jdXJzb3I7XHJcbiAgICAgICAgcmV0dXJuIGNoYXJ0T2JqZWN0VW5kZXJNb3VzZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgb25EcmFnKGNoYXJ0OiBJVHJhY2VDaGFydCkge1xyXG4gICAgfVxyXG5cclxuICAgIG9uRHJhZ0VuZChjaGFydDogSVRyYWNlQ2hhcnQpe1xyXG4gICAgfVxyXG5cclxuICAgIG9uTW91c2VEb3duKGNoYXJ0OiBJVHJhY2VDaGFydCwgY2hhcnRPYmplY3RVbmRlck1vdXNlIDogQ2hhcnRPYmplY3RJbmZvcm1hdGlvbiwgbW91c2VQb2ludDogSVBvaW50KSA6IENoYXJ0T2JqZWN0SW5mb3JtYXRpb257XHJcbiAgICAgICAgaWYoY2hhcnRPYmplY3RVbmRlck1vdXNlLmNoYXJ0T2JqZWN0VHlwZSA9PSBDaGFydE9iamVjdFR5cGUuY3Vyc29yKXtcclxuICAgICAgICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25Db250cm9sbGVyLmV4ZWN1dGVDb21tYW5kKG5ldyBFdmVudEV4ZWN1dGVDaGFydENvbW1hbmRBcmdzKHRoaXMsIENoYXJ0Q29tbWFuZFR5cGUuc2V0Q3Vyc29yT25Qb2ludGVyUG9zaXRpb24sIGNoYXJ0LCB7Y3Vyc29ySW5kZXg6IGNoYXJ0T2JqZWN0VW5kZXJNb3VzZS5hcmdzLmN1cnNvckluZGV4LCBtb3VzZVBvaW50OiBtb3VzZVBvaW50fSkpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoY2hhcnRPYmplY3RVbmRlck1vdXNlLmNoYXJ0T2JqZWN0VHlwZSA9PSBDaGFydE9iamVjdFR5cGUuY2hhcnRTcGFjZSl7XHJcbiAgICAgICAgICAgIHRoaXMudXNlckludGVyYWN0aW9uQ29udHJvbGxlci5leGVjdXRlQ29tbWFuZChuZXcgRXZlbnRFeGVjdXRlQ2hhcnRDb21tYW5kQXJncyh0aGlzLCBDaGFydENvbW1hbmRUeXBlLnNldEN1cnNvck9uUG9pbnRlclBvc2l0aW9uLCBjaGFydCwge2N1cnNvckluZGV4OiB0aGlzLmluZGV4LCBtb3VzZVBvaW50OiBtb3VzZVBvaW50fSkpXHJcbiAgICAgICAgICAgIGNoYXJ0T2JqZWN0VW5kZXJNb3VzZS5hcmdzLmN1cnNvckluZGV4ID0gdGhpcy5pbmRleDtcclxuXHJcbiAgICAgICAgICAgIGNoYXJ0T2JqZWN0VW5kZXJNb3VzZS5jaGFydE9iamVjdFR5cGUgPSBDaGFydE9iamVjdFR5cGUuY3Vyc29yO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGNoYXJ0T2JqZWN0VW5kZXJNb3VzZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHtDdXJzb3JJbnRlcmFjdGlvblN0cmF0ZWd5fSJdfQ==