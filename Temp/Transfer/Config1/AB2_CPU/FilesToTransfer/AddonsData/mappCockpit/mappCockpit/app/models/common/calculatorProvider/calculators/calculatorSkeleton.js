var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "./calculatorBase", "../calculationDataPoints", "../calculationDataDisplayInfo"], function (require, exports, calculatorBase_1, calculationDataPoints_1, calculationDataDisplayInfo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /********************************************************************************************************************************************************
     *   This skeleton should assist in creating new calculators.                                                                                           *
     *   Copy the content into a new file within the folder "src/app/models/common/calculatorProvider/calculators/".                                        *
     *   Change the class name to a meaningful name for YOUR calculator.                                                                                    *
     *   Implement your specific functionality in the marked areas within each function.                                                                    *
     *   It is recommended and the default of this skeleton, to call the overridden functions of the base class to utilize centralized common behaviour.    *
     *   To not perform the default behavior when overriding, delete the super calls.                                                                       *
     *   Remove functions only if you dont provide a specialised behavior (careful, some default implementations might do nothing).                         *
     *   You may introduce new functions to use within the provided (overridden) functions whenever necessary.                                              *
     *   After finishing the implementation, remove the skeleton specific comments and add your own code documentation/comments.                            *
     *                                                                                                                                                      *
     *   ATTENTION: The functions in this skeleton are overrides. Do not change the function signature.                                                     *
     *   ATTENTION: Do not forget to export the new calculator class to make it available in other code files.                                              *
     *   ATTENTION: Make sure to add your calculator to the CalculatorProvider in the file 'calculatorProvider.ts' to be able to access it within the UI.   *
     ********************************************************************************************************************************************************/
    var CalculatorSkeleton = /** @class */ (function (_super) {
        __extends(CalculatorSkeleton, _super);
        /**************************************************************************************************************************************************/
        function CalculatorSkeleton() {
            var _this = _super.call(this, "calculator id here", "calculator display name here", "calculator description here") || this;
            /*************************************************************************************************************************************************
             * Use private properties to have centralized control over displaynames and others.                                                              *
             * A minimal basic example is implemented to provide an idea of the naming and the purpose.                                                      *
             *************************************************************************************************************************************************/
            /**************************************************************************************************************************************************/
            _this.inputName = "displayname for input signal here";
            _this.outputName = "displayname for output signal here";
            _this.outputValue = "signalname for output signal here";
            return _this;
        }
        CalculatorSkeleton.prototype.getDefaultInputData = function () {
            var defaultInputData = _super.prototype.getDefaultInputData.call(this);
            /*************************************************************************************************************************************************
             *   Add your default input data here (Push it on the array defaultInputData).                                                                   *
             *   You can accept a number (CalculationDataNumber) or a signal (CalculationDataPoints) or both (CalculationDataNumberOrPoints) as input.       *
             *   You can also accept a string (CalculationDataString) as input                                                                               *
             *   Consider to store the displaynames as private property.                                                                                     *
             *   A minimal basic example is implemented where one signal is the default input data.                                                          *
             *************************************************************************************************************************************************/
            /**************************************************************************************************************************************************/
            defaultInputData.push(new calculationDataPoints_1.CalculationDataPoints(this.inputName, "", new Array(), "description for the input signal here", new calculationDataDisplayInfo_1.CalculationDataDisplayInfo(false, true)));
            /**************************************************************************************************************************************************/
            return defaultInputData;
        };
        CalculatorSkeleton.prototype.getDefaultOutputData = function () {
            var defaultOutputData = _super.prototype.getDefaultOutputData.call(this);
            /*************************************************************************************************************************************************
             *   Add your default output data here (Push it on the array defaultOuputData).                                                                  *
             *   Consider to store the displaynames and signalnames as private property.                                                                     *
             *   A minimal basic example is implemented where one signal is the default putput data.                                                         *
             *************************************************************************************************************************************************/
            /**************************************************************************************************************************************************/
            defaultOutputData.push(new calculationDataPoints_1.CalculationDataPoints(this.outputName, this.outputValue, new Array()));
            /**************************************************************************************************************************************************/
            return defaultOutputData;
        };
        CalculatorSkeleton.prototype.prepareCalculationData = function () {
            _super.prototype.prepareCalculationData.call(this);
            //retrieve calculation input data
            var calculationInputDataContainer = this.getCalculationInputDataContainer();
            /*************************************************************************************************************************************************
             *   Perform necessary data preparations for the calculator here.                                                                                *
             *   This data preparations are performed before verification of the calculation input data takes place.                                         *
             *   Store the changed data in the data property of the respective CalculationInputData.                                                         *
             *************************************************************************************************************************************************/
            /**************************************************************************************************************************************************/
            /**************************************************************************************************************************************************/
        };
        CalculatorSkeleton.prototype.verifyCalculationInputData = function () {
            _super.prototype.verifyCalculationInputData.call(this);
            //retrieve calculation input data
            var calculationInputDataContainer = this.getCalculationInputDataContainer();
            /*************************************************************************************************************************************************
             *   Verify the calculation input data here.                                                                                                     *
             *   Add an error with addErrorByType() or addError() methods id something is wrong.                                                             *
             *************************************************************************************************************************************************/
            /**************************************************************************************************************************************************/
            /**************************************************************************************************************************************************/
        };
        CalculatorSkeleton.prototype.executeAlgorithm = function () {
            _super.prototype.executeAlgorithm.call(this);
            //retrieve calculation input data and initialize result
            var calculationInputData = this.getCalculationInputDataContainer();
            var result = new Array();
            /*************************************************************************************************************************************************
             *   Execute the algorithm your calculator represents here.                                                                                      *
             *   Store the result of the algorithm in the array result.                                                                                      *
             *************************************************************************************************************************************************/
            /**************************************************************************************************************************************************/
            /**************************************************************************************************************************************************/
            //add the result of the calculation to the calculationOutpuContainer
            this.addCalculationOutputData({
                data: result,
                value: this.outputValue,
                name: this.outputName
            });
        };
        CalculatorSkeleton.prototype.verifyCalculationOutputData = function () {
            _super.prototype.verifyCalculationOutputData.call(this);
            //retrieve calculation output data
            var calculationOutputDataContainer = this.getCalculationOutputDataContainer();
            /*************************************************************************************************************************************************
             *   Verify the calculation output data here.                                                                                                    *
             *   Add an error with addErrorByType() or addError() methods if something is wrong.                                                             *
             *************************************************************************************************************************************************/
            /**************************************************************************************************************************************************/
            /**************************************************************************************************************************************************/
        };
        return CalculatorSkeleton;
    }(calculatorBase_1.CalculatorBase));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsY3VsYXRvclNrZWxldG9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9tb2RlbHMvY29tbW9uL2NhbGN1bGF0b3JQcm92aWRlci9jYWxjdWxhdG9ycy9jYWxjdWxhdG9yU2tlbGV0b24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztJQU9BOzs7Ozs7Ozs7Ozs7Ozs4SkFjMEo7SUFFMUo7UUFBaUMsc0NBQWM7UUFVM0Msb0pBQW9KO1FBRXBKO1lBQUEsWUFDSSxrQkFBTSxvQkFBb0IsRUFBRSw4QkFBOEIsRUFBRSw2QkFBNkIsQ0FBQyxTQUM3RjtZQVpEOzs7K0pBR21KO1lBQ25KLG9KQUFvSjtZQUM1SSxlQUFTLEdBQUcsbUNBQW1DLENBQUM7WUFDaEQsZ0JBQVUsR0FBRyxvQ0FBb0MsQ0FBQztZQUNsRCxpQkFBVyxHQUFHLG1DQUFtQyxDQUFDOztRQUsxRCxDQUFDO1FBRU0sZ0RBQW1CLEdBQTFCO1lBQ0ksSUFBSSxnQkFBZ0IsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRSxDQUFDO1lBRW5EOzs7Ozs7K0pBTW1KO1lBQ25KLG9KQUFvSjtZQUNwSixnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSw2Q0FBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxJQUFJLEtBQUssRUFBVSxFQUFFLHVDQUF1QyxFQUFFLElBQUksdURBQTBCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoTCxvSkFBb0o7WUFFcEosT0FBTyxnQkFBZ0IsQ0FBQztRQUM1QixDQUFDO1FBRU0saURBQW9CLEdBQTNCO1lBQ0ksSUFBSSxpQkFBaUIsR0FBRyxpQkFBTSxvQkFBb0IsV0FBRSxDQUFDO1lBRXJEOzs7OytKQUltSjtZQUNuSixvSkFBb0o7WUFDcEosaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksNkNBQXFCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksS0FBSyxFQUFVLENBQUMsQ0FBQyxDQUFDO1lBQzFHLG9KQUFvSjtZQUVwSixPQUFPLGlCQUFpQixDQUFDO1FBQzdCLENBQUM7UUFFUyxtREFBc0IsR0FBaEM7WUFDSSxpQkFBTSxzQkFBc0IsV0FBRSxDQUFDO1lBRS9CLGlDQUFpQztZQUNqQyxJQUFJLDZCQUE2QixHQUFHLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDO1lBRTVFOzs7OytKQUltSjtZQUNuSixvSkFBb0o7WUFHcEosb0pBQW9KO1FBQ3hKLENBQUM7UUFFUyx1REFBMEIsR0FBcEM7WUFDSSxpQkFBTSwwQkFBMEIsV0FBRSxDQUFDO1lBRW5DLGlDQUFpQztZQUNqQyxJQUFJLDZCQUE2QixHQUFHLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDO1lBRTVFOzs7K0pBR21KO1lBQ25KLG9KQUFvSjtZQUdwSixvSkFBb0o7UUFDeEosQ0FBQztRQUVTLDZDQUFnQixHQUExQjtZQUNJLGlCQUFNLGdCQUFnQixXQUFFLENBQUE7WUFFeEIsdURBQXVEO1lBQ3ZELElBQUksb0JBQW9CLEdBQUcsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLENBQUM7WUFDbkUsSUFBSSxNQUFNLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztZQUVqQzs7OytKQUdtSjtZQUNuSixvSkFBb0o7WUFHcEosb0pBQW9KO1lBRXBKLG9FQUFvRTtZQUNwRSxJQUFJLENBQUMsd0JBQXdCLENBQUM7Z0JBQzFCLElBQUksRUFBRSxNQUFNO2dCQUNaLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVztnQkFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO2FBQ3hCLENBQUMsQ0FBQztRQUNQLENBQUM7UUFFUyx3REFBMkIsR0FBckM7WUFDSSxpQkFBTSwyQkFBMkIsV0FBRSxDQUFDO1lBRXBDLGtDQUFrQztZQUNsQyxJQUFJLDhCQUE4QixHQUFHLElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxDQUFDO1lBRTlFOzs7K0pBR21KO1lBQ25KLG9KQUFvSjtZQUdwSixvSkFBb0o7UUFDeEosQ0FBQztRQUNMLHlCQUFDO0lBQUQsQ0FBQyxBQXhIRCxDQUFpQywrQkFBYyxHQXdIOUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYWxjdWxhdG9yQmFzZSB9IGZyb20gXCIuL2NhbGN1bGF0b3JCYXNlXCI7XHJcbmltcG9ydCB7IENhbGN1bGF0aW9uRGF0YVBvaW50cyB9IGZyb20gXCIuLi9jYWxjdWxhdGlvbkRhdGFQb2ludHNcIjtcclxuaW1wb3J0IHsgSVBvaW50IH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXMvcG9pbnRJbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgQ2FsY3VsYXRpb25EYXRhRGlzcGxheUluZm8gfSBmcm9tIFwiLi4vY2FsY3VsYXRpb25EYXRhRGlzcGxheUluZm9cIjtcclxuaW1wb3J0IHsgVENhbGN1bGF0aW9uRGF0YSB9IGZyb20gXCIuLi9jYWxjdWxhdGlvbkRhdGFcIjtcclxuXHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogICBUaGlzIHNrZWxldG9uIHNob3VsZCBhc3Npc3QgaW4gY3JlYXRpbmcgbmV3IGNhbGN1bGF0b3JzLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXHJcbiAqICAgQ29weSB0aGUgY29udGVudCBpbnRvIGEgbmV3IGZpbGUgd2l0aGluIHRoZSBmb2xkZXIgXCJzcmMvYXBwL21vZGVscy9jb21tb24vY2FsY3VsYXRvclByb3ZpZGVyL2NhbGN1bGF0b3JzL1wiLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXHJcbiAqICAgQ2hhbmdlIHRoZSBjbGFzcyBuYW1lIHRvIGEgbWVhbmluZ2Z1bCBuYW1lIGZvciBZT1VSIGNhbGN1bGF0b3IuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4gKiAgIEltcGxlbWVudCB5b3VyIHNwZWNpZmljIGZ1bmN0aW9uYWxpdHkgaW4gdGhlIG1hcmtlZCBhcmVhcyB3aXRoaW4gZWFjaCBmdW5jdGlvbi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcclxuICogICBJdCBpcyByZWNvbW1lbmRlZCBhbmQgdGhlIGRlZmF1bHQgb2YgdGhpcyBza2VsZXRvbiwgdG8gY2FsbCB0aGUgb3ZlcnJpZGRlbiBmdW5jdGlvbnMgb2YgdGhlIGJhc2UgY2xhc3MgdG8gdXRpbGl6ZSBjZW50cmFsaXplZCBjb21tb24gYmVoYXZpb3VyLiAgICAqXHJcbiAqICAgVG8gbm90IHBlcmZvcm0gdGhlIGRlZmF1bHQgYmVoYXZpb3Igd2hlbiBvdmVycmlkaW5nLCBkZWxldGUgdGhlIHN1cGVyIGNhbGxzLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4gKiAgIFJlbW92ZSBmdW5jdGlvbnMgb25seSBpZiB5b3UgZG9udCBwcm92aWRlIGEgc3BlY2lhbGlzZWQgYmVoYXZpb3IgKGNhcmVmdWwsIHNvbWUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbnMgbWlnaHQgZG8gbm90aGluZykuICAgICAgICAgICAgICAgICAgICAgICAgICpcclxuICogICBZb3UgbWF5IGludHJvZHVjZSBuZXcgZnVuY3Rpb25zIHRvIHVzZSB3aXRoaW4gdGhlIHByb3ZpZGVkIChvdmVycmlkZGVuKSBmdW5jdGlvbnMgd2hlbmV2ZXIgbmVjZXNzYXJ5LiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXHJcbiAqICAgQWZ0ZXIgZmluaXNoaW5nIHRoZSBpbXBsZW1lbnRhdGlvbiwgcmVtb3ZlIHRoZSBza2VsZXRvbiBzcGVjaWZpYyBjb21tZW50cyBhbmQgYWRkIHlvdXIgb3duIGNvZGUgZG9jdW1lbnRhdGlvbi9jb21tZW50cy4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcclxuICogICBBVFRFTlRJT046IFRoZSBmdW5jdGlvbnMgaW4gdGhpcyBza2VsZXRvbiBhcmUgb3ZlcnJpZGVzLiBEbyBub3QgY2hhbmdlIHRoZSBmdW5jdGlvbiBzaWduYXR1cmUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXHJcbiAqICAgQVRURU5USU9OOiBEbyBub3QgZm9yZ2V0IHRvIGV4cG9ydCB0aGUgbmV3IGNhbGN1bGF0b3IgY2xhc3MgdG8gbWFrZSBpdCBhdmFpbGFibGUgaW4gb3RoZXIgY29kZSBmaWxlcy4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4gKiAgIEFUVEVOVElPTjogTWFrZSBzdXJlIHRvIGFkZCB5b3VyIGNhbGN1bGF0b3IgdG8gdGhlIENhbGN1bGF0b3JQcm92aWRlciBpbiB0aGUgZmlsZSAnY2FsY3VsYXRvclByb3ZpZGVyLnRzJyB0byBiZSBhYmxlIHRvIGFjY2VzcyBpdCB3aXRoaW4gdGhlIFVJLiAgICpcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuY2xhc3MgQ2FsY3VsYXRvclNrZWxldG9uIGV4dGVuZHMgQ2FsY3VsYXRvckJhc2Uge1xyXG5cclxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiBVc2UgcHJpdmF0ZSBwcm9wZXJ0aWVzIHRvIGhhdmUgY2VudHJhbGl6ZWQgY29udHJvbCBvdmVyIGRpc3BsYXluYW1lcyBhbmQgb3RoZXJzLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4gICAgICogQSBtaW5pbWFsIGJhc2ljIGV4YW1wbGUgaXMgaW1wbGVtZW50ZWQgdG8gcHJvdmlkZSBhbiBpZGVhIG9mIHRoZSBuYW1pbmcgYW5kIHRoZSBwdXJwb3NlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcclxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgcHJpdmF0ZSBpbnB1dE5hbWUgPSBcImRpc3BsYXluYW1lIGZvciBpbnB1dCBzaWduYWwgaGVyZVwiO1xyXG4gICAgcHJpdmF0ZSBvdXRwdXROYW1lID0gXCJkaXNwbGF5bmFtZSBmb3Igb3V0cHV0IHNpZ25hbCBoZXJlXCI7XHJcbiAgICBwcml2YXRlIG91dHB1dFZhbHVlID0gXCJzaWduYWxuYW1lIGZvciBvdXRwdXQgc2lnbmFsIGhlcmVcIjtcclxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8gXHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJjYWxjdWxhdG9yIGlkIGhlcmVcIiwgXCJjYWxjdWxhdG9yIGRpc3BsYXkgbmFtZSBoZXJlXCIsIFwiY2FsY3VsYXRvciBkZXNjcmlwdGlvbiBoZXJlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXREZWZhdWx0SW5wdXREYXRhKCk6IEFycmF5PFRDYWxjdWxhdGlvbkRhdGE+IHtcclxuICAgICAgICBsZXQgZGVmYXVsdElucHV0RGF0YSA9IHN1cGVyLmdldERlZmF1bHRJbnB1dERhdGEoKTtcclxuXHJcbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAgICAgKiAgIEFkZCB5b3VyIGRlZmF1bHQgaW5wdXQgZGF0YSBoZXJlIChQdXNoIGl0IG9uIHRoZSBhcnJheSBkZWZhdWx0SW5wdXREYXRhKS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAqICAgWW91IGNhbiBhY2NlcHQgYSBudW1iZXIgKENhbGN1bGF0aW9uRGF0YU51bWJlcikgb3IgYSBzaWduYWwgKENhbGN1bGF0aW9uRGF0YVBvaW50cykgb3IgYm90aCAoQ2FsY3VsYXRpb25EYXRhTnVtYmVyT3JQb2ludHMpIGFzIGlucHV0LiAgICAgICAqXHJcbiAgICAgICAgICogICBZb3UgY2FuIGFsc28gYWNjZXB0IGEgc3RyaW5nIChDYWxjdWxhdGlvbkRhdGFTdHJpbmcpIGFzIGlucHV0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgKiAgIENvbnNpZGVyIHRvIHN0b3JlIHRoZSBkaXNwbGF5bmFtZXMgYXMgcHJpdmF0ZSBwcm9wZXJ0eS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAqICAgQSBtaW5pbWFsIGJhc2ljIGV4YW1wbGUgaXMgaW1wbGVtZW50ZWQgd2hlcmUgb25lIHNpZ25hbCBpcyB0aGUgZGVmYXVsdCBpbnB1dCBkYXRhLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgICAgIGRlZmF1bHRJbnB1dERhdGEucHVzaChuZXcgQ2FsY3VsYXRpb25EYXRhUG9pbnRzKHRoaXMuaW5wdXROYW1lLCBcIlwiLCBuZXcgQXJyYXk8SVBvaW50PigpLCBcImRlc2NyaXB0aW9uIGZvciB0aGUgaW5wdXQgc2lnbmFsIGhlcmVcIiwgbmV3IENhbGN1bGF0aW9uRGF0YURpc3BsYXlJbmZvKGZhbHNlLCB0cnVlKSkpO1xyXG4gICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gZGVmYXVsdElucHV0RGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RGVmYXVsdE91dHB1dERhdGEoKTogQXJyYXk8Q2FsY3VsYXRpb25EYXRhUG9pbnRzPiB7XHJcbiAgICAgICAgbGV0IGRlZmF1bHRPdXRwdXREYXRhID0gc3VwZXIuZ2V0RGVmYXVsdE91dHB1dERhdGEoKTtcclxuXHJcbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAgICAgKiAgIEFkZCB5b3VyIGRlZmF1bHQgb3V0cHV0IGRhdGEgaGVyZSAoUHVzaCBpdCBvbiB0aGUgYXJyYXkgZGVmYXVsdE91cHV0RGF0YSkuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAqICAgQ29uc2lkZXIgdG8gc3RvcmUgdGhlIGRpc3BsYXluYW1lcyBhbmQgc2lnbmFsbmFtZXMgYXMgcHJpdmF0ZSBwcm9wZXJ0eS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICogICBBIG1pbmltYWwgYmFzaWMgZXhhbXBsZSBpcyBpbXBsZW1lbnRlZCB3aGVyZSBvbmUgc2lnbmFsIGlzIHRoZSBkZWZhdWx0IHB1dHB1dCBkYXRhLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICAgICAgZGVmYXVsdE91dHB1dERhdGEucHVzaChuZXcgQ2FsY3VsYXRpb25EYXRhUG9pbnRzKHRoaXMub3V0cHV0TmFtZSwgdGhpcy5vdXRwdXRWYWx1ZSwgbmV3IEFycmF5PElQb2ludD4oKSkpOyBcclxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gICAgICAgIHJldHVybiBkZWZhdWx0T3V0cHV0RGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgcHJlcGFyZUNhbGN1bGF0aW9uRGF0YSgpIHtcclxuICAgICAgICBzdXBlci5wcmVwYXJlQ2FsY3VsYXRpb25EYXRhKCk7XHJcblxyXG4gICAgICAgIC8vcmV0cmlldmUgY2FsY3VsYXRpb24gaW5wdXQgZGF0YVxyXG4gICAgICAgIGxldCBjYWxjdWxhdGlvbklucHV0RGF0YUNvbnRhaW5lciA9IHRoaXMuZ2V0Q2FsY3VsYXRpb25JbnB1dERhdGFDb250YWluZXIoKTtcclxuXHJcbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAgICAgKiAgIFBlcmZvcm0gbmVjZXNzYXJ5IGRhdGEgcHJlcGFyYXRpb25zIGZvciB0aGUgY2FsY3VsYXRvciBoZXJlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAqICAgVGhpcyBkYXRhIHByZXBhcmF0aW9ucyBhcmUgcGVyZm9ybWVkIGJlZm9yZSB2ZXJpZmljYXRpb24gb2YgdGhlIGNhbGN1bGF0aW9uIGlucHV0IGRhdGEgdGFrZXMgcGxhY2UuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICogICBTdG9yZSB0aGUgY2hhbmdlZCBkYXRhIGluIHRoZSBkYXRhIHByb3BlcnR5IG9mIHRoZSByZXNwZWN0aXZlIENhbGN1bGF0aW9uSW5wdXREYXRhLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cclxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHZlcmlmeUNhbGN1bGF0aW9uSW5wdXREYXRhKCkge1xyXG4gICAgICAgIHN1cGVyLnZlcmlmeUNhbGN1bGF0aW9uSW5wdXREYXRhKCk7XHJcblxyXG4gICAgICAgIC8vcmV0cmlldmUgY2FsY3VsYXRpb24gaW5wdXQgZGF0YVxyXG4gICAgICAgIGxldCBjYWxjdWxhdGlvbklucHV0RGF0YUNvbnRhaW5lciA9IHRoaXMuZ2V0Q2FsY3VsYXRpb25JbnB1dERhdGFDb250YWluZXIoKTtcclxuXHJcbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAgICAgKiAgIFZlcmlmeSB0aGUgY2FsY3VsYXRpb24gaW5wdXQgZGF0YSBoZXJlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAqICAgQWRkIGFuIGVycm9yIHdpdGggYWRkRXJyb3JCeVR5cGUoKSBvciBhZGRFcnJvcigpIG1ldGhvZHMgaWQgc29tZXRoaW5nIGlzIHdyb25nLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuXHJcbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBleGVjdXRlQWxnb3JpdGhtKCkge1xyXG4gICAgICAgIHN1cGVyLmV4ZWN1dGVBbGdvcml0aG0oKVxyXG5cclxuICAgICAgICAvL3JldHJpZXZlIGNhbGN1bGF0aW9uIGlucHV0IGRhdGEgYW5kIGluaXRpYWxpemUgcmVzdWx0XHJcbiAgICAgICAgbGV0IGNhbGN1bGF0aW9uSW5wdXREYXRhID0gdGhpcy5nZXRDYWxjdWxhdGlvbklucHV0RGF0YUNvbnRhaW5lcigpO1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgQXJyYXk8SVBvaW50PigpO1xyXG5cclxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICAgICAqICAgRXhlY3V0ZSB0aGUgYWxnb3JpdGhtIHlvdXIgY2FsY3VsYXRvciByZXByZXNlbnRzIGhlcmUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICogICBTdG9yZSB0aGUgcmVzdWx0IG9mIHRoZSBhbGdvcml0aG0gaW4gdGhlIGFycmF5IHJlc3VsdC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cclxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gICAgICAgIC8vYWRkIHRoZSByZXN1bHQgb2YgdGhlIGNhbGN1bGF0aW9uIHRvIHRoZSBjYWxjdWxhdGlvbk91dHB1Q29udGFpbmVyXHJcbiAgICAgICAgdGhpcy5hZGRDYWxjdWxhdGlvbk91dHB1dERhdGEoe1xyXG4gICAgICAgICAgICBkYXRhOiByZXN1bHQsXHJcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLm91dHB1dFZhbHVlLFxyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm91dHB1dE5hbWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgdmVyaWZ5Q2FsY3VsYXRpb25PdXRwdXREYXRhKCl7XHJcbiAgICAgICAgc3VwZXIudmVyaWZ5Q2FsY3VsYXRpb25PdXRwdXREYXRhKCk7XHJcblxyXG4gICAgICAgIC8vcmV0cmlldmUgY2FsY3VsYXRpb24gb3V0cHV0IGRhdGFcclxuICAgICAgICBsZXQgY2FsY3VsYXRpb25PdXRwdXREYXRhQ29udGFpbmVyID0gdGhpcy5nZXRDYWxjdWxhdGlvbk91dHB1dERhdGFDb250YWluZXIoKTtcclxuICAgICAgICBcclxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICAgICAqICAgVmVyaWZ5IHRoZSBjYWxjdWxhdGlvbiBvdXRwdXQgZGF0YSBoZXJlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICogICBBZGQgYW4gZXJyb3Igd2l0aCBhZGRFcnJvckJ5VHlwZSgpIG9yIGFkZEVycm9yKCkgbWV0aG9kcyBpZiBzb21ldGhpbmcgaXMgd3JvbmcuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cclxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICB9XHJcbn0iXX0=