define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CursorDefinitionBase = /** @class */ (function () {
        function CursorDefinitionBase(cursorHandlerId, cursorIndex) {
            this.cursorHandlerContainerId = cursorHandlerId;
            this.cursorPositions = [];
            this.cursorColor = "var(--main-cursor1-color)";
            this.hoverColor = "var(--main-cursor1-hover-color)";
            this.selectedColor = "var(--main-cursor1-active-color)";
        }
        /**
         *set the colors for this cursor style
         *
         * @param {string} cursorColor
         * @param {string} hoverColor
         * @param {string} selectedColor
         * @memberof CursorStyleBase
         */
        CursorDefinitionBase.prototype.setColor = function (cursorColor, hoverColor, selectedColor) {
            this.cursorColor = cursorColor;
            this.hoverColor = hoverColor;
            this.selectedColor = selectedColor;
            this.removeCursors();
            this.drawCursor(this.leadCursorPosition, this.cursorPositions);
        };
        return CursorDefinitionBase;
    }());
    exports.CursorDefinitionBase = CursorDefinitionBase;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3Vyc29yRGVmaW5pdGlvbkJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYXBwL3dpZGdldHMvY2hhcnRWaWV3V2lkZ2V0L2N1cnNvci9DdXJzb3JEZWZpbml0aW9uQmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFHQTtRQVdJLDhCQUFZLGVBQXVCLEVBQUUsV0FBbUI7WUFDcEQsSUFBSSxDQUFDLHdCQUF3QixHQUFHLGVBQWUsQ0FBQztZQUNoRCxJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztZQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLDJCQUEyQixDQUFDO1lBQy9DLElBQUksQ0FBQyxVQUFVLEdBQUcsaUNBQWlDLENBQUM7WUFDcEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxrQ0FBa0MsQ0FBQztRQUM1RCxDQUFDO1FBaUNEOzs7Ozs7O1dBT0c7UUFDSSx1Q0FBUSxHQUFmLFVBQWdCLFdBQW1CLEVBQUUsVUFBa0IsRUFBRSxhQUFxQjtZQUMxRSxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztZQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztZQUM3QixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztZQUNuQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ25FLENBQUM7UUFDTCwyQkFBQztJQUFELENBQUMsQUFqRUQsSUFpRUM7SUFqRXFCLG9EQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElQb2ludCB9IGZyb20gXCIuLi8uLi8uLi9tb2RlbHMvY29tbW9uL2ludGVyZmFjZXMvcG9pbnRJbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgQ3Vyc29yUG9zaXRpb24gfSBmcm9tIFwiLi9DdXJzb3JQb3NpdGlvbkluZm9cIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDdXJzb3JEZWZpbml0aW9uQmFzZSB7XHJcbiAgICBwcm90ZWN0ZWQgY3Vyc29ySGFuZGxlckNvbnRhaW5lcklkOiBzdHJpbmc7XHJcbiAgICBcclxuICAgIHByb3RlY3RlZCBjdXJzb3JQb3NpdGlvbnM6IEN1cnNvclBvc2l0aW9uW107XHJcbiAgICBwcm90ZWN0ZWQgbGVhZEN1cnNvclBvc2l0aW9uO1xyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgY3Vyc29yQ29sb3I6IHN0cmluZztcclxuICAgIHByb3RlY3RlZCBob3ZlckNvbG9yOiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgc2VsZWN0ZWRDb2xvcjogc3RyaW5nO1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjdXJzb3JIYW5kbGVySWQ6IHN0cmluZywgY3Vyc29ySW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuY3Vyc29ySGFuZGxlckNvbnRhaW5lcklkID0gY3Vyc29ySGFuZGxlcklkO1xyXG4gICAgICAgIHRoaXMuY3Vyc29yUG9zaXRpb25zID0gW107XHJcbiAgICAgICAgdGhpcy5jdXJzb3JDb2xvciA9IFwidmFyKC0tbWFpbi1jdXJzb3IxLWNvbG9yKVwiO1xyXG4gICAgICAgIHRoaXMuaG92ZXJDb2xvciA9IFwidmFyKC0tbWFpbi1jdXJzb3IxLWhvdmVyLWNvbG9yKVwiO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRDb2xvciA9IFwidmFyKC0tbWFpbi1jdXJzb3IxLWFjdGl2ZS1jb2xvcilcIjtcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICpzZXQgdGhlIGN1cnNvciBwb3NpdGlvbnMgZm9yIHRoaXMgY3Vyc29yIHN0eWxlXHJcbiAgICAgKlxyXG4gICAgICogQGFic3RyYWN0XHJcbiAgICAgKiBAcGFyYW0ge0N1cnNvclBvc2l0aW9ufSBsZWFkQ3Vyc29yUG9zaXRpb25cclxuICAgICAqIEBwYXJhbSB7Q3Vyc29yUG9zaXRpb25bXX0gY3Vyc29yUG9zaXRpb25zXHJcbiAgICAgKiBAbWVtYmVyb2YgQ3Vyc29yU3R5bGVCYXNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBkcmF3Q3Vyc29yKGxlYWRDdXJzb3JQb3NpdGlvbjogQ3Vyc29yUG9zaXRpb24sIGN1cnNvclBvc2l0aW9uczogQ3Vyc29yUG9zaXRpb25bXSk6IHZvaWQ7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICpyZW1vdmUgYWxsIGN1cnNvcnMgZHJhd24gYnkgdGhpcyBjdXJzb3Igc3R5bGVcclxuICAgICAqXHJcbiAgICAgKiBAYWJzdHJhY3RcclxuICAgICAqIEBtZW1iZXJvZiBDdXJzb3JTdHlsZUJhc2VcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFic3RyYWN0IHJlbW92ZUN1cnNvcnMoKTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKmdldCB0aGUgY2xvc2VzdCBjdXJzb3IgcG9zaXRpb24gc2V0IGZvciB0aGlzIGN1cnNvciBzdHlsZVxyXG4gICAgICpcclxuICAgICAqIEBhYnN0cmFjdFxyXG4gICAgICogQHBhcmFtIHtJUG9pbnR9IHBvaW50XHJcbiAgICAgKiBAcmV0dXJucyB7KEN1cnNvclBvc2l0aW9uIHwgdW5kZWZpbmVkKX1cclxuICAgICAqIEBtZW1iZXJvZiBDdXJzb3JTdHlsZUJhc2VcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFic3RyYWN0IGdldENsb3Nlc3RDdXJzb3JQb3NpdGlvblRvUG9pbnQocG9pbnQ6IElQb2ludCk6IEN1cnNvclBvc2l0aW9uIHwgdW5kZWZpbmVkO1xyXG4gICBcclxuICAgIC8qKlxyXG4gICAgICpzZXQgdGhlIGNvbG9ycyBmb3IgdGhpcyBjdXJzb3Igc3R5bGVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY3Vyc29yQ29sb3JcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBob3ZlckNvbG9yXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0ZWRDb2xvclxyXG4gICAgICogQG1lbWJlcm9mIEN1cnNvclN0eWxlQmFzZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0Q29sb3IoY3Vyc29yQ29sb3I6IHN0cmluZywgaG92ZXJDb2xvcjogc3RyaW5nLCBzZWxlY3RlZENvbG9yOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmN1cnNvckNvbG9yID0gY3Vyc29yQ29sb3I7XHJcbiAgICAgICAgdGhpcy5ob3ZlckNvbG9yID0gaG92ZXJDb2xvcjtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkQ29sb3IgPSBzZWxlY3RlZENvbG9yO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQ3Vyc29ycygpO1xyXG4gICAgICAgIHRoaXMuZHJhd0N1cnNvcih0aGlzLmxlYWRDdXJzb3JQb3NpdGlvbiwgdGhpcy5jdXJzb3JQb3NpdGlvbnMpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==