define(["require", "exports", "../userInteractionController", "../../ChartBase"], function (require, exports, userInteractionController_1, ChartBase_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CursorDragStrategy = /** @class */ (function () {
        function CursorDragStrategy(userInteractionController, index) {
            this.dragIsActive = false;
            this.activeCursorIndex = -1;
            this.userInteractionController = userInteractionController;
        }
        CursorDragStrategy.prototype.onMouseHover = function (chart, args, mousePoint) {
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.checkCursorHovering, chart, { mousePoint: mousePoint }));
        };
        CursorDragStrategy.prototype.onClick = function (chart, chartObjectTypeUnderMouse) {
            this.dragIsActive = false;
        };
        CursorDragStrategy.prototype.onDrag = function (chart, args) {
            if (args.objectUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.cursor || this.dragIsActive == true) {
                if (args.objectUnderMouse.args.cursorIndex != undefined && this.dragIsActive == false) {
                    this.activeCursorIndex = args.objectUnderMouse.args.cursorIndex;
                }
                this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.dragCursor, chart, {
                    cursorIndex: this.activeCursorIndex,
                    movementX: args.mousePoint.x,
                    movementY: args.mousePoint.y,
                }));
                this.dragIsActive = true;
            }
        };
        CursorDragStrategy.prototype.onDragEnd = function (chart) {
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.endCursorDrag, chart, {}));
            this.dragIsActive = false;
            this.userInteractionController.executeCommand(new userInteractionController_1.EventExecuteChartCommandArgs(this, userInteractionController_1.ChartCommandType.resetDragPosition, null, {}));
        };
        CursorDragStrategy.prototype.onMouseDown = function (chart, chartObjectUnderMouse) {
            if (chartObjectUnderMouse.chartObjectType == ChartBase_1.ChartObjectType.cursor) {
                this.dragIsActive = true;
                this.activeCursorIndex = chartObjectUnderMouse.args.cursorIndex;
            }
            return chartObjectUnderMouse;
        };
        return CursorDragStrategy;
    }());
    exports.CursorDragStrategy = CursorDragStrategy;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Vyc29yRHJhZ1N0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC93aWRnZXRzL2NoYXJ0Vmlld1dpZGdldC91c2VySW50ZXJhY3Rpb24vc3RyYXRlZ2llcy9jdXJzb3JEcmFnU3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBTUE7UUFNSSw0QkFBWSx5QkFBcUQsRUFBRSxLQUFhO1lBSGhGLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLHNCQUFpQixHQUFHLENBQUMsQ0FBQyxDQUFDO1lBR25CLElBQUksQ0FBQyx5QkFBeUIsR0FBRyx5QkFBeUIsQ0FBQztRQUMvRCxDQUFDO1FBRUQseUNBQVksR0FBWixVQUFhLEtBQWtCLEVBQUUsSUFBSSxFQUFFLFVBQVU7WUFDN0MsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsQ0FBQyxJQUFJLHdEQUE0QixDQUFDLElBQUksRUFBRSw0Q0FBZ0IsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLEVBQUUsRUFBQyxVQUFVLEVBQUcsVUFBVSxFQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2pLLENBQUM7UUFFRCxvQ0FBTyxHQUFQLFVBQVEsS0FBa0IsRUFBRSx5QkFBaUQ7WUFDekUsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDOUIsQ0FBQztRQUVELG1DQUFNLEdBQU4sVUFBTyxLQUFrQixFQUFFLElBQUk7WUFDM0IsSUFBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxJQUFJLDJCQUFlLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxFQUFDO2dCQUM1RixJQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLEtBQUssRUFBQztvQkFDakYsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO2lCQUNuRTtnQkFFRCxJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUN6QyxJQUFJLHdEQUE0QixDQUFDLElBQUksRUFDakMsNENBQWdCLENBQUMsVUFBVSxFQUMzQixLQUFLLEVBQ0w7b0JBQ0ksV0FBVyxFQUFFLElBQUksQ0FBQyxpQkFBaUI7b0JBQ25DLFNBQVMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQzVCLFNBQVMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7aUJBQy9CLENBQ0osQ0FDSixDQUFBO2dCQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO2FBQzVCO1FBQ0wsQ0FBQztRQUVELHNDQUFTLEdBQVQsVUFBVSxLQUFrQjtZQUN4QixJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLElBQUksd0RBQTRCLENBQUMsSUFBSSxFQUFFLDRDQUFnQixDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUNoSSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUUxQixJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLElBQUksd0RBQTRCLENBQUMsSUFBSSxFQUFFLDRDQUFnQixDQUFDLGlCQUFpQixFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hJLENBQUM7UUFFRCx3Q0FBVyxHQUFYLFVBQVksS0FBa0IsRUFBRSxxQkFBOEM7WUFDMUUsSUFBRyxxQkFBcUIsQ0FBQyxlQUFlLElBQUksMkJBQWUsQ0FBQyxNQUFNLEVBQUM7Z0JBQy9ELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO2dCQUN6QixJQUFJLENBQUMsaUJBQWlCLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQzthQUNuRTtZQUVELE9BQU8scUJBQXFCLENBQUM7UUFDakMsQ0FBQztRQUNMLHlCQUFDO0lBQUQsQ0FBQyxBQXRERCxJQXNEQztJQUdPLGdEQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDaGFydEludGVyYWN0aW9uU3RyYXRlZ3kgfSBmcm9tIFwiLi9jaGFyU3RyYXRlZ3lJbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgQ2hhcnRDb21tYW5kVHlwZSwgRXZlbnRFeGVjdXRlQ2hhcnRDb21tYW5kQXJncyB9IGZyb20gXCIuLi91c2VySW50ZXJhY3Rpb25Db250cm9sbGVyXCI7XHJcbmltcG9ydCB7IElVc2VySW50ZXJhY3Rpb25Db250cm9sbGVyIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvY29udHJvbGxlckludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBJVHJhY2VDaGFydCB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL3RyYWNlQ2hhcnRJbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgQ2hhcnRPYmplY3RUeXBlLCBDaGFydE9iamVjdEluZm9ybWF0aW9uIH0gZnJvbSBcIi4uLy4uL0NoYXJ0QmFzZVwiO1xyXG5cclxuY2xhc3MgIEN1cnNvckRyYWdTdHJhdGVneSBpbXBsZW1lbnRzIElDaGFydEludGVyYWN0aW9uU3RyYXRlZ3l7XHJcbiAgICBwcml2YXRlIHVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXI6IElVc2VySW50ZXJhY3Rpb25Db250cm9sbGVyO1xyXG5cclxuICAgIGRyYWdJc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgYWN0aXZlQ3Vyc29ySW5kZXggPSAtMTtcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IodXNlckludGVyYWN0aW9uQ29udHJvbGxlcjogSVVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXIsIGluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXIgPSB1c2VySW50ZXJhY3Rpb25Db250cm9sbGVyO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBvbk1vdXNlSG92ZXIoY2hhcnQ6IElUcmFjZUNoYXJ0LCBhcmdzLCBtb3VzZVBvaW50KSB7XHJcbiAgICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25Db250cm9sbGVyLmV4ZWN1dGVDb21tYW5kKG5ldyBFdmVudEV4ZWN1dGVDaGFydENvbW1hbmRBcmdzKHRoaXMsIENoYXJ0Q29tbWFuZFR5cGUuY2hlY2tDdXJzb3JIb3ZlcmluZywgY2hhcnQsIHttb3VzZVBvaW50IDogbW91c2VQb2ludH0pKVxyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xpY2soY2hhcnQ6IElUcmFjZUNoYXJ0LCBjaGFydE9iamVjdFR5cGVVbmRlck1vdXNlOiBDaGFydE9iamVjdEluZm9ybWF0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5kcmFnSXNBY3RpdmUgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgb25EcmFnKGNoYXJ0OiBJVHJhY2VDaGFydCwgYXJncykge1xyXG4gICAgICAgIGlmKGFyZ3Mub2JqZWN0VW5kZXJNb3VzZS5jaGFydE9iamVjdFR5cGUgPT0gQ2hhcnRPYmplY3RUeXBlLmN1cnNvciB8fCB0aGlzLmRyYWdJc0FjdGl2ZSA9PSB0cnVlKXtcclxuICAgICAgICAgICAgaWYoYXJncy5vYmplY3RVbmRlck1vdXNlLmFyZ3MuY3Vyc29ySW5kZXggIT0gdW5kZWZpbmVkICYmIHRoaXMuZHJhZ0lzQWN0aXZlID09IGZhbHNlKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlQ3Vyc29ySW5kZXggPSBhcmdzLm9iamVjdFVuZGVyTW91c2UuYXJncy5jdXJzb3JJbmRleDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy51c2VySW50ZXJhY3Rpb25Db250cm9sbGVyLmV4ZWN1dGVDb21tYW5kKFxyXG4gICAgICAgICAgICAgICAgbmV3IEV2ZW50RXhlY3V0ZUNoYXJ0Q29tbWFuZEFyZ3ModGhpcywgXHJcbiAgICAgICAgICAgICAgICAgICAgQ2hhcnRDb21tYW5kVHlwZS5kcmFnQ3Vyc29yLCBcclxuICAgICAgICAgICAgICAgICAgICBjaGFydCwgXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3JJbmRleDogdGhpcy5hY3RpdmVDdXJzb3JJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZW1lbnRYOiBhcmdzLm1vdXNlUG9pbnQueCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZW1lbnRZOiBhcmdzLm1vdXNlUG9pbnQueSxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgdGhpcy5kcmFnSXNBY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkRyYWdFbmQoY2hhcnQ6IElUcmFjZUNoYXJ0KXtcclxuICAgICAgICB0aGlzLnVzZXJJbnRlcmFjdGlvbkNvbnRyb2xsZXIuZXhlY3V0ZUNvbW1hbmQobmV3IEV2ZW50RXhlY3V0ZUNoYXJ0Q29tbWFuZEFyZ3ModGhpcywgQ2hhcnRDb21tYW5kVHlwZS5lbmRDdXJzb3JEcmFnLCBjaGFydCwge30pKVxyXG4gICAgICAgIHRoaXMuZHJhZ0lzQWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMudXNlckludGVyYWN0aW9uQ29udHJvbGxlci5leGVjdXRlQ29tbWFuZChuZXcgRXZlbnRFeGVjdXRlQ2hhcnRDb21tYW5kQXJncyh0aGlzLCBDaGFydENvbW1hbmRUeXBlLnJlc2V0RHJhZ1Bvc2l0aW9uLCBudWxsICx7fSkpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTW91c2VEb3duKGNoYXJ0OiBJVHJhY2VDaGFydCwgY2hhcnRPYmplY3RVbmRlck1vdXNlIDogQ2hhcnRPYmplY3RJbmZvcm1hdGlvbikgOiBDaGFydE9iamVjdEluZm9ybWF0aW9ue1xyXG4gICAgICAgIGlmKGNoYXJ0T2JqZWN0VW5kZXJNb3VzZS5jaGFydE9iamVjdFR5cGUgPT0gQ2hhcnRPYmplY3RUeXBlLmN1cnNvcil7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhZ0lzQWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5hY3RpdmVDdXJzb3JJbmRleCA9IGNoYXJ0T2JqZWN0VW5kZXJNb3VzZS5hcmdzLmN1cnNvckluZGV4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNoYXJ0T2JqZWN0VW5kZXJNb3VzZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7Q3Vyc29yRHJhZ1N0cmF0ZWd5fSJdfQ==