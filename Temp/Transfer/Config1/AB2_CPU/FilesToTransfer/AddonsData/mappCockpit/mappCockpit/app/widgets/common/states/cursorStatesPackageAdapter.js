define(["require", "exports", "../../../common/packageConversion/enum/objectTypeEnum", "../../../common/persistence/settings", "../../../common/packageConversion/enum/dataTypeEnum", "../../../common/packageConversion/enum/additionalMetaKeys", "../../../common/packageConversion/mceConversionError", "../../../common/packageConversion/meta", "../../../common/packageConversion/package", "./settingIds", "./cursorState"], function (require, exports, objectTypeEnum_1, settings_1, dataTypeEnum_1, additionalMetaKeys_1, mceConversionError_1, meta_1, package_1, settingIds_1, cursorState_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    //Enum to map the numbers, representing a cursor type to a string and back again
    var CursorTypeMapping;
    (function (CursorTypeMapping) {
        CursorTypeMapping[CursorTypeMapping["timeDomain"] = 0] = "timeDomain";
        CursorTypeMapping[CursorTypeMapping["frequencyDomain"] = 1] = "frequencyDomain";
    })(CursorTypeMapping || (CursorTypeMapping = {}));
    var DataIds;
    (function (DataIds) {
        DataIds["TimeCursorStates"] = "timeCursorStates";
        DataIds["FftCursorStates"] = "fftCursorStates";
        DataIds["Type"] = "type";
        DataIds["Position"] = "position";
    })(DataIds || (DataIds = {}));
    var CursorStatesPackageAdapter = /** @class */ (function () {
        function CursorStatesPackageAdapter() {
            //newest version of package format
            this.currentPackageVersion = 1;
            //CursorState ObjectType (not a seperate adapter)
            this.cursorStateDataObjecType = "cursorstatedata";
            this.settingsType = "CursorStates";
            this.objectType = objectTypeEnum_1.ObjectType.CURSORSTATES;
        }
        CursorStatesPackageAdapter.prototype.packageToSetting = function (packageData, container) {
            var _a, _b, _c;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_a = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _a === void 0 ? void 0 : _a.dataType) == dataTypeEnum_1.DataType.OBJECT && ((_b = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _b === void 0 ? void 0 : _b[additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE]) == this.objectType) {
                switch ((_c = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _c === void 0 ? void 0 : _c[additionalMetaKeys_1.AdditionalMetaKeys.VERSION]) {
                    case 1:
                        setting = this.packageV1ToSetting(packageData, container);
                        break;
                    default:
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.objectType);
                }
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_TYPE, this.objectType);
            }
            return setting;
        };
        CursorStatesPackageAdapter.prototype.packageV1ToSetting = function (packageData, container) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_c = (_b = (_a = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _a === void 0 ? void 0 : _a[DataIds.TimeCursorStates]) === null || _b === void 0 ? void 0 : _b.meta) === null || _c === void 0 ? void 0 : _c.dataType) == dataTypeEnum_1.DataType.ARRAY && ((_f = (_e = (_d = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _d === void 0 ? void 0 : _d[DataIds.TimeCursorStates]) === null || _e === void 0 ? void 0 : _e.meta) === null || _f === void 0 ? void 0 : _f[additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE]) == this.cursorStateDataObjecType) {
                var timeCursorStatesArray = (_h = (_g = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _g === void 0 ? void 0 : _g[DataIds.TimeCursorStates]) === null || _h === void 0 ? void 0 : _h.data;
                setting.setValue(settingIds_1.SettingIds.TimeCursorPositions, this.cursorStateDataObjecToCursorState(timeCursorStatesArray));
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.TimeCursorStates);
            }
            if (((_l = (_k = (_j = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _j === void 0 ? void 0 : _j[DataIds.FftCursorStates]) === null || _k === void 0 ? void 0 : _k.meta) === null || _l === void 0 ? void 0 : _l.dataType) == dataTypeEnum_1.DataType.ARRAY && ((_p = (_o = (_m = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _m === void 0 ? void 0 : _m[DataIds.FftCursorStates]) === null || _o === void 0 ? void 0 : _o.meta) === null || _p === void 0 ? void 0 : _p[additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE]) == this.cursorStateDataObjecType) {
                var fftCursorStatesArray = (_r = (_q = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _q === void 0 ? void 0 : _q[DataIds.FftCursorStates]) === null || _r === void 0 ? void 0 : _r.data;
                setting.setValue(settingIds_1.SettingIds.FftCursorPositions, this.cursorStateDataObjecToCursorState(fftCursorStatesArray));
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.FftCursorStates);
            }
            return setting;
        };
        CursorStatesPackageAdapter.prototype.cursorStateDataObjecToCursorState = function (cursorStateDataObjectArray) {
            var cursorStateArray = new Array();
            cursorStateDataObjectArray.forEach(function (cursorStateDataObject) {
                var cursorState = new cursorState_1.CursorState(CursorTypeMapping[cursorStateDataObject[DataIds.Type]]);
                var position = (Number.isNaN(cursorStateDataObject[DataIds.Position])) ? undefined : cursorStateDataObject[DataIds.Position];
                cursorState.position = position;
                cursorStateArray.push(cursorState);
            });
            return cursorStateArray;
        };
        CursorStatesPackageAdapter.prototype.cursorStateToCursorStateDataObject = function (cursorStateArray, cursorType) {
            var cursorStateDataObjectArray = new Array();
            cursorStateArray.forEach(function (cursorState) {
                var cursorStateDataObject = {};
                cursorStateDataObject[DataIds.Type] = cursorType;
                //let position: number = (cursorState === undefined) ? NaN : cursorState;
                cursorStateDataObject[DataIds.Position] = cursorState;
                cursorStateDataObjectArray.push(cursorStateDataObject);
            });
            return cursorStateDataObjectArray;
        };
        CursorStatesPackageAdapter.prototype.settingToPackage = function (settingsData) {
            var settings = settings_1.Settings.create(settingsData);
            var seriesData = {};
            var packageStructure = {
                packages: new Array(),
                topLevelID: NaN
            };
            if (settings.type === this.settingsType) {
                var id = meta_1.Meta.createID();
                var additionalMetaInfo = [{ key: additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE, value: this.objectType }, { key: additionalMetaKeys_1.AdditionalMetaKeys.ID, value: id }, { key: additionalMetaKeys_1.AdditionalMetaKeys.VERSION, value: this.currentPackageVersion }];
                var seriesMeta = new meta_1.Meta(dataTypeEnum_1.DataType.OBJECT, additionalMetaInfo);
                var timeCursorStateData = settings.getValue(settingIds_1.SettingIds.TimeCursorPositions);
                if (timeCursorStateData !== undefined) {
                    var timeCursorStateDataObject = this.cursorStateToCursorStateDataObject(timeCursorStateData, CursorTypeMapping.timeDomain);
                    seriesData[DataIds.TimeCursorStates] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.ARRAY, [{ key: additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE, value: this.cursorStateDataObjecType }]), timeCursorStateDataObject);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.TimeCursorPositions);
                }
                var fftCursorStateData = settings.getValue(settingIds_1.SettingIds.FftCursorPositions);
                if (fftCursorStateData !== undefined) {
                    var fftCursorStateDataObject = this.cursorStateToCursorStateDataObject(fftCursorStateData, CursorTypeMapping.frequencyDomain);
                    seriesData[DataIds.FftCursorStates] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.ARRAY, [{ key: additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE, value: this.cursorStateDataObjecType }]), fftCursorStateDataObject);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.FftCursorPositions);
                }
                var seriesPackage = new package_1.Package(seriesMeta, seriesData);
                packageStructure.packages.push(seriesPackage);
                packageStructure.topLevelID = id;
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.settingsType);
            }
            return packageStructure;
        };
        return CursorStatesPackageAdapter;
    }());
    exports.CursorStatesPackageAdapter = CursorStatesPackageAdapter;
});
//# sourceMappingURL=data:application/json;base64,